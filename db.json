{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/README.md","hash":"7be42f0354e49b847c50ac2fd5f43650b2ab0493","modified":1459994537658},{"_id":"themes/indigo/_config.yml","hash":"e6f9b7b6fa34dc80cd683cbf14101b9350a68d38","modified":1460703913535},{"_id":"themes/indigo/package.json","hash":"9c9d90b83a204a42178f6057c8c252c3af07a92e","modified":1459994537668},{"_id":"source/_posts/Android N将逐步实现对VR支持.md","hash":"e47c030e6bf601ef9edfbe33ab1dfa4f86113886","modified":1460985272927},{"_id":"source/_posts/动态权限管理.md","hash":"0f2b52f92fdf75bc41dc7b9508196755811b3574","modified":1460985272927},{"_id":"source/_posts/IPC机制.md","hash":"337e2ba210caf7f01dcb99efdd10a3642cb99f97","modified":1460985272927},{"_id":"source/_posts/Gradle.md","hash":"3c177fda86fc166605125a11d4e8e5964388db73","modified":1460216423023},{"_id":"source/about/index.md","hash":"7f80bf4024bcadf1cc0883a986c3ee8e66250687","modified":1460985272927},{"_id":"source/tags/index.md","hash":"42d9ee5e869fe2d230b01fd7a62bd4779515e29b","modified":1460985272927},{"_id":"themes/indigo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1459994537666},{"_id":"themes/indigo/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1459994537667},{"_id":"themes/indigo/layout/category.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1459994537666},{"_id":"themes/indigo/layout/layout.ejs","hash":"415e249dc7c9da8fe496987b024b956dbcc419cf","modified":1459994537667},{"_id":"themes/indigo/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459994537667},{"_id":"themes/indigo/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459994537668},{"_id":"themes/indigo/layout/tag.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1459994537668},{"_id":"themes/indigo/screenshots/hexo-theme-pad.png","hash":"d7c897b32e7eab0146bb2530433c9b8b7571d59c","modified":1459994537670},{"_id":"themes/indigo/screenshots/hexo-theme-phone-1.png","hash":"9b30409ec4c9b94b5582346323ed2c8e26dbc4c0","modified":1459994537673},{"_id":"themes/indigo/screenshots/hexo-theme-phone-2.png","hash":"b6807228992222a8fa095a940a41f40f841a5f6e","modified":1459994537673},{"_id":"themes/indigo/layout/_partial/archive-post.ejs","hash":"30f2db93230675cd9bc45ce5bd9cbc8bf270f983","modified":1459994537659},{"_id":"themes/indigo/layout/_partial/article.ejs","hash":"cd3445c3ee05093a1b98c81498ead155a2be222f","modified":1460015984644},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"58c7c54a8d883fdc3995993cb2c7330c2f071d9b","modified":1459994537659},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"d38648a2848e797db5d10fe5e1ade731285de5da","modified":1459994537659},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"8a82e4ebe6a6aec6942bba0a6a80d728e365f423","modified":1460102912524},{"_id":"themes/indigo/layout/_partial/cnzz.ejs","hash":"dbee64698919aeaeb0923c44b3f8c5402c7b8fed","modified":1459994537660},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"958a760a9400c204b06c3327e691e0a827a971b1","modified":1459994537661},{"_id":"themes/indigo/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1459994537660},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"15505b7cf766df714f8cc1f137c7efcc7fe08cfd","modified":1459994537661},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1459994537661},{"_id":"themes/indigo/layout/_partial/mathjax.ejs","hash":"c539b64a558513136f36a36ab1246a7884a59167","modified":1459994537662},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"2232ffe737f53a24ffc8a88f10b1c99e91d03eb0","modified":1459994537662},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"28ec2ae3e8ff9356e5c9f20f7721b9418885c2ca","modified":1459994537666},{"_id":"themes/indigo/source/css/style.less","hash":"1d6490c9e956140574ac910b4d3552343cb93476","modified":1459994537707},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1459994537708},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1459994537708},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1459994537709},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1459994537709},{"_id":"themes/indigo/source/js/main.js","hash":"407cce2e37c264684b70802ddd81cdbc850349c6","modified":1459994537710},{"_id":"themes/indigo/screenshots/hexo-theme-pc.png","hash":"497742866f4b550c05e9cb0d353c08b4f9e9d171","modified":1459994537672},{"_id":"themes/indigo/source/img/logo.jpg","hash":"de4c31e799fc66b3c82672b960166d92f4b1016a","modified":1459995112640},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1459994537662},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"4c682265e374716c23cd1422ba642cba93d46d82","modified":1459994537663},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"d388863c3fbdbaadce38a3dd33d7a537b14b8b82","modified":1459994537663},{"_id":"themes/indigo/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1459994537663},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"976b970a6a1f6140a1a1b30a335588ad9af72319","modified":1459994537664},{"_id":"themes/indigo/layout/_partial/post/tags.ejs","hash":"f8e019f8183fc1771f18e344029bc8ecb86272e0","modified":1459994537665},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"d09cd22c2985f9e8a712970deb3a9d8290cc9108","modified":1459994537664},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"60139e37b41769d218e5cf6f6040c41bd2293728","modified":1459994537664},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"47967f75b47c7fac22432a3d75c6978081ccd1cd","modified":1459994537665},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"70792112a5d220416f136c161438f1959540d7bb","modified":1459994537674},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"f8b3ad6414d15449e6f527d00418150169f3cc5f","modified":1459994537674},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"3b98acb9be434dc8af30f72db2ad92dd5a90ee4e","modified":1459994537675},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1459994537675},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"9398ee93315299aeb8144c0958e899f4ffea96d5","modified":1459994537676},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"2bb977cd0b66e1237cb746e03b50c7db9940a98a","modified":1459994537678},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"1476bc73fb0f47bc693b78246af103cb22a474b9","modified":1459994537678},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"0361039b2abdeb1b41e504fa437df962cda055d2","modified":1459994537678},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"54a4553f6d2aac95d29285603d91a3a86d5fad99","modified":1459994537678},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1459994537679},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"5c830c4b6a5c263acfc342f6e669b117a2745f81","modified":1459994537679},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"36e77ccb39b080aab19d9d87fd20882d5ac84ee9","modified":1459994537679},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"ef2a2fa0fbd313be1259c630bea547e9a7a51320","modified":1459994537679},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a8b41b0b0c8ff2f6cf95f7f9784611dd8c212ffe","modified":1459994537680},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1459994537689},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1459994537691},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1459994537692},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1459994537692},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1459994537694},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1459994537695},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1459994537695},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1459994537698},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1459994537698},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1459994537698},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1459994537700},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1459994537701},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1459994537701},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1459994537706},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1459994537707},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1459994537682},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1459994537682},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1459994537688},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1459994537688},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1459994537690},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1459994537693},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1459994537697},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1459994537700},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1459994537704},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1459994537687},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1459994537685},{"_id":"public/about/index.html","hash":"c1aa044a4303c8cf7c9fe11d032398092d8c3d91","modified":1460987162837},{"_id":"public/tags/index.html","hash":"47e6f857d0997db73d9e2755600d00e256c6fb54","modified":1460987162837},{"_id":"public/2016/04/18/Android N将逐步实现对VR支持/index.html","hash":"2181d4fdb457f69ecf966513bd675946d1381360","modified":1460987162837},{"_id":"public/archives/index.html","hash":"e34deec3bf87fc95d2a80829fd9dc61d5d9ab344","modified":1460987162837},{"_id":"public/archives/2016/index.html","hash":"06dc3005a26ec559abb25d4a3eb8483610f48f6b","modified":1460987162837},{"_id":"public/archives/2016/04/index.html","hash":"31234d35470b833e4b68ccf70850fca684b2e7d0","modified":1460987162837},{"_id":"public/tags/Android/index.html","hash":"df10b562788a79c3cac266ea9a9024986e245800","modified":1460987162837},{"_id":"public/tags/杂谈/index.html","hash":"e098f488f2926d59d14866786b7c9580f956b7fb","modified":1460987162838},{"_id":"public/tags/移动开发/index.html","hash":"02c5bb0275d2abd46eec6180d62ebaa6afb10077","modified":1460987162838},{"_id":"public/2016/04/09/Gradle/index.html","hash":"fd6a1169d505b9c54f31ada5dcd79b79875b77e7","modified":1460987162838},{"_id":"public/2016/04/08/动态权限管理/index.html","hash":"886d2de78b77f4e2cf8104ad951c98ff493b839b","modified":1460987162838},{"_id":"public/2016/04/07/IPC机制/index.html","hash":"dae2c16127dd05dc71d6eff022a3e7fa3a9c2597","modified":1460987162838},{"_id":"public/index.html","hash":"05322aa49fcf330e610bb4f85fbc94a81fc9f1d5","modified":1460987162838},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1460987162851},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1460987162851},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1460987162851},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1460987162851},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1460987162851},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1460987162853},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1460987162853},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1460987162853},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1460987162854},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1460987162854},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1460987162854},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1460987162855},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1460987162855},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1460987162855},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1460987162855},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1460987162855},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1460987162855},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1460987162855},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1460987162855},{"_id":"public/img/logo.jpg","hash":"de4c31e799fc66b3c82672b960166d92f4b1016a","modified":1460987162880},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1460987162881},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1460987162881},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1460987162881},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1460987162881},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1460987162881},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1460987162881},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1460987162881},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1460987162881},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1460987162882},{"_id":"public/js/main.js","hash":"930bf16af315a4063b6a4769272f2a2b6913735e","modified":1460987162891},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1460987162891},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1460987162917},{"_id":"public/css/style.css","hash":"3968a5ce3c48df2689744e78b967fcbf1049b03d","modified":1460987163013}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2016-04-15T06:51:55.000Z","_content":"### 关于我\n\n90后程序猿一枚，主要从事Android平台的软件开发相关工作。懂点Python、Java web、Html。热爱编程，喜欢学习新技术。\n\n### 关于博客\n\n写一些自己在工作、学习及生活中的感悟。\n\n### 联系方式\n* 邮箱：joytan1209@163.com</163>\n* QQ：354150263\n","source":"about/index.md","raw":"---\ntitle: \"关于\"\ndate: 2016-04-15 14:51:55\n---\n### 关于我\n\n90后程序猿一枚，主要从事Android平台的软件开发相关工作。懂点Python、Java web、Html。热爱编程，喜欢学习新技术。\n\n### 关于博客\n\n写一些自己在工作、学习及生活中的感悟。\n\n### 联系方式\n* 邮箱：joytan1209@163.com</163>\n* QQ：354150263\n","updated":"2016-04-18T13:14:32.927Z","path":"about/index.html","comments":1,"layout":"page","_id":"cin6219a2000jaww4q76zoa7k","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>90后程序猿一枚，主要从事Android平台的软件开发相关工作。懂点Python、Java web、Html。热爱编程，喜欢学习新技术。</p>\n<h3 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h3><p>写一些自己在工作、学习及生活中的感悟。</p>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>邮箱：joytan1209@163.com</li>\n<li>QQ：354150263</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>90后程序猿一枚，主要从事Android平台的软件开发相关工作。懂点Python、Java web、Html。热爱编程，喜欢学习新技术。</p>\n<h3 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h3><p>写一些自己在工作、学习及生活中的感悟。</p>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>邮箱：joytan1209@163.com</163></li>\n<li>QQ：354150263</li>\n</ul>\n"},{"title":"标签","type":"tags","noDate":true,"comments":0,"_content":"#Android\n#移动开发\n#Python\n#Java\n#杂谈","source":"tags/index.md","raw":"---\ntitle: \"标签\"\ntype: \"tags\"\nnoDate: true\ncomments: false\n---\n#Android\n#移动开发\n#Python\n#Java\n#杂谈","date":"2016-04-18T13:14:32.927Z","updated":"2016-04-18T13:14:32.927Z","path":"tags/index.html","layout":"page","_id":"cin6219a3000kaww4z5qmzdzt","content":"<p>#Android</p>\n<p>#移动开发</p>\n<p>#Python</p>\n<p>#Java</p>\n<p>#杂谈</p>\n","excerpt":"","more":"<p>#Android</p>\n<p>#移动开发</p>\n<p>#Python</p>\n<p>#Java</p>\n<p>#杂谈</p>\n"}],"Post":[{"layout":"posts","title":"Android N将逐步实现对VR支持","date":"2016-04-18T06:07:10.000Z","_content":"据国外媒体报道，在Android N的开发者预览版中支持VR功能，同时支持Khronos最新Vulkan API。其他还支持全新的3D渲染API（Vulkan）、Emoji Unicode 9、压感屏及面向平板的分屏多任务模式等。\n\n在Android系统中，可以通过以下路径来访问这个炫酷的功能:\n``` bash\n    Settings（设置） -> Apps（应用） -> Configure apps（应用配置） -> Special Access（特殊访问） -> VR helper services（虚拟现实辅助服务）\n```\n然后将显示接入这个API的应用列表，用户可以选择永许或者拒绝。这看起来似乎很快就可以有一个名为VR Listener”或者“VR helper”的应用了。\n![VR helper services](../../../../images/vr_help_services.jpg)\n\n有关VR的细节暂不清楚，但《华尔街日报》在2月份提到过，Google正赶在推出自家基于智能机的头戴式装之前优化Android，让它能够更好地支持VR设备。\n\n有关VR模式的一个猜想是，其会禁用手机的自锁机制，以避免使用一段时间后突然“黑屏”。此外，Google据说还在打造一款无需智能机或PC的独立装置。\n\n根据报道还说有一个新硬件支持标志，名为“Config Sustained Performance Mode Supported”，Ars Technica的Ron Amadeo觉得它可能是一个特殊的功能，允许持续直接使用手机的CPU和GPU，跟Gear VR能够在兼容的三星手机上运行的方式类似。\n\n我们知道谷歌的虚拟现实雄心远远超过了Cardboard，现在通过这个新版本系统的更新可以得道印证。在2016年第三季度Android N发布之前，谷歌至少在计划另外3个开发商预览版，所以我们可能会继续看到虚拟现实功能的增加。","source":"_posts/Android N将逐步实现对VR支持.md","raw":"layout: posts\ntitle: Android N将逐步实现对VR支持\ndate: 2016-04-18 14:07:10\ntags:\n    - Android\n    - 杂谈\n---\n据国外媒体报道，在Android N的开发者预览版中支持VR功能，同时支持Khronos最新Vulkan API。其他还支持全新的3D渲染API（Vulkan）、Emoji Unicode 9、压感屏及面向平板的分屏多任务模式等。\n\n在Android系统中，可以通过以下路径来访问这个炫酷的功能:\n``` bash\n    Settings（设置） -> Apps（应用） -> Configure apps（应用配置） -> Special Access（特殊访问） -> VR helper services（虚拟现实辅助服务）\n```\n然后将显示接入这个API的应用列表，用户可以选择永许或者拒绝。这看起来似乎很快就可以有一个名为VR Listener”或者“VR helper”的应用了。\n![VR helper services](../../../../images/vr_help_services.jpg)\n\n有关VR的细节暂不清楚，但《华尔街日报》在2月份提到过，Google正赶在推出自家基于智能机的头戴式装之前优化Android，让它能够更好地支持VR设备。\n\n有关VR模式的一个猜想是，其会禁用手机的自锁机制，以避免使用一段时间后突然“黑屏”。此外，Google据说还在打造一款无需智能机或PC的独立装置。\n\n根据报道还说有一个新硬件支持标志，名为“Config Sustained Performance Mode Supported”，Ars Technica的Ron Amadeo觉得它可能是一个特殊的功能，允许持续直接使用手机的CPU和GPU，跟Gear VR能够在兼容的三星手机上运行的方式类似。\n\n我们知道谷歌的虚拟现实雄心远远超过了Cardboard，现在通过这个新版本系统的更新可以得道印证。在2016年第三季度Android N发布之前，谷歌至少在计划另外3个开发商预览版，所以我们可能会继续看到虚拟现实功能的增加。","slug":"Android N将逐步实现对VR支持","published":1,"updated":"2016-04-18T13:14:32.927Z","comments":1,"photos":[],"link":"","_id":"cin6219980000aww4bigx0afx","content":"<p>据国外媒体报道，在Android N的开发者预览版中支持VR功能，同时支持Khronos最新Vulkan API。其他还支持全新的3D渲染API（Vulkan）、Emoji Unicode 9、压感屏及面向平板的分屏多任务模式等。</p>\n<p>在Android系统中，可以通过以下路径来访问这个炫酷的功能:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings（设置） -&gt; Apps（应用） -&gt; Configure apps（应用配置） -&gt; Special Access（特殊访问） -&gt; VR helper services（虚拟现实辅助服务）</span><br></pre></td></tr></table></figure></p>\n<p>然后将显示接入这个API的应用列表，用户可以选择永许或者拒绝。这看起来似乎很快就可以有一个名为VR Listener”或者“VR helper”的应用了。<br><img src=\"../../../../images/vr_help_services.jpg\" alt=\"VR helper services\"></p>\n<p>有关VR的细节暂不清楚，但《华尔街日报》在2月份提到过，Google正赶在推出自家基于智能机的头戴式装之前优化Android，让它能够更好地支持VR设备。</p>\n<p>有关VR模式的一个猜想是，其会禁用手机的自锁机制，以避免使用一段时间后突然“黑屏”。此外，Google据说还在打造一款无需智能机或PC的独立装置。</p>\n<p>根据报道还说有一个新硬件支持标志，名为“Config Sustained Performance Mode Supported”，Ars Technica的Ron Amadeo觉得它可能是一个特殊的功能，允许持续直接使用手机的CPU和GPU，跟Gear VR能够在兼容的三星手机上运行的方式类似。</p>\n<p>我们知道谷歌的虚拟现实雄心远远超过了Cardboard，现在通过这个新版本系统的更新可以得道印证。在2016年第三季度Android N发布之前，谷歌至少在计划另外3个开发商预览版，所以我们可能会继续看到虚拟现实功能的增加。</p>\n","excerpt":"","more":"<p>据国外媒体报道，在Android N的开发者预览版中支持VR功能，同时支持Khronos最新Vulkan API。其他还支持全新的3D渲染API（Vulkan）、Emoji Unicode 9、压感屏及面向平板的分屏多任务模式等。</p>\n<p>在Android系统中，可以通过以下路径来访问这个炫酷的功能:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings（设置） -&gt; Apps（应用） -&gt; Configure apps（应用配置） -&gt; Special Access（特殊访问） -&gt; VR helper services（虚拟现实辅助服务）</span><br></pre></td></tr></table></figure></p>\n<p>然后将显示接入这个API的应用列表，用户可以选择永许或者拒绝。这看起来似乎很快就可以有一个名为VR Listener”或者“VR helper”的应用了。<br><img src=\"../../../../images/vr_help_services.jpg\" alt=\"VR helper services\"></p>\n<p>有关VR的细节暂不清楚，但《华尔街日报》在2月份提到过，Google正赶在推出自家基于智能机的头戴式装之前优化Android，让它能够更好地支持VR设备。</p>\n<p>有关VR模式的一个猜想是，其会禁用手机的自锁机制，以避免使用一段时间后突然“黑屏”。此外，Google据说还在打造一款无需智能机或PC的独立装置。</p>\n<p>根据报道还说有一个新硬件支持标志，名为“Config Sustained Performance Mode Supported”，Ars Technica的Ron Amadeo觉得它可能是一个特殊的功能，允许持续直接使用手机的CPU和GPU，跟Gear VR能够在兼容的三星手机上运行的方式类似。</p>\n<p>我们知道谷歌的虚拟现实雄心远远超过了Cardboard，现在通过这个新版本系统的更新可以得道印证。在2016年第三季度Android N发布之前，谷歌至少在计划另外3个开发商预览版，所以我们可能会继续看到虚拟现实功能的增加。</p>\n"},{"title":"Android IPC机制","date":"2016-04-07T02:38:40.000Z","_content":"**Android IPC机制**\n\n在任何一个操作系统中都需要IPC机制的存在，例如：Linux中通过共享内存、命名通道等来实现进程间的通信。然而在Android系统中是什么来实现呢？答案是Binder。当然，不仅使用了Binder机制来实现了IPC,还使用了Socket实现不同终端之间的通信。\n\n### IPC介绍\n\n1、Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。\n\n2、serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值：\n\t1.静态成员变量属于类不属于对象，所以不参与序列化过程；\n\t2.声明为transient的成员变量不参与序列化过程。\n\t3.Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等\n\n### 实现IPC的方式\n\n1、 Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。\n\n2、 Messenger：Messenger是一种轻量级的IPC方案，其底层是用AIDL实现的。Messenger是以串行的方式处理请求的，服务端只能一个个处理，不能并发执行。\n\n3、 AIDL：第一步创建一个Service和一个AIDL接口，第二步创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，然后在Service的onBind方法中返回这个类的对象，再在客户端绑定服务端Service，建立连接后就可以访问远程服务端的方法。\n\n\t1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；\n\t2.某些类即使和AIDL文件在同一个包中也要显式import进来；\n\t3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；\n\t4.AIDL接口中支持方法，不支持声明静态变量；\n\t5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。\n\t6.RemoteCallbackList是系统提供来删除跨进程Listener的接口。是一个泛型，可以管理任何的ALDL接口。\n\n 4、ContentProvider：\n\n\t1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；\n\t2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；\n\t3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；\n\t4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；\n\n 5、Socket：Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。 \n\n 6、文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。\n\n ### Binder连接池\n\t\n如果项目规模较大，创建过多的Service是不合理的，因为service是系统资源，过多的service会使得应用看起来很重，所以最好的做法是将所有的AIDL放在同一个Service中去管理。其工作机制是：每一个业务模块创建自己的AIDL接口并实现此接口，此时不同业务模块之间不能有耦合，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。\nBinder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。","source":"_posts/IPC机制.md","raw":"---\ntitle: \"Android IPC机制\"\ndate: 2016-04-07 10:38:40\ntags: \n\t- Android\n\t- 移动开发\n---\n**Android IPC机制**\n\n在任何一个操作系统中都需要IPC机制的存在，例如：Linux中通过共享内存、命名通道等来实现进程间的通信。然而在Android系统中是什么来实现呢？答案是Binder。当然，不仅使用了Binder机制来实现了IPC,还使用了Socket实现不同终端之间的通信。\n\n### IPC介绍\n\n1、Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。\n\n2、serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值：\n\t1.静态成员变量属于类不属于对象，所以不参与序列化过程；\n\t2.声明为transient的成员变量不参与序列化过程。\n\t3.Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等\n\n### 实现IPC的方式\n\n1、 Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。\n\n2、 Messenger：Messenger是一种轻量级的IPC方案，其底层是用AIDL实现的。Messenger是以串行的方式处理请求的，服务端只能一个个处理，不能并发执行。\n\n3、 AIDL：第一步创建一个Service和一个AIDL接口，第二步创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，然后在Service的onBind方法中返回这个类的对象，再在客户端绑定服务端Service，建立连接后就可以访问远程服务端的方法。\n\n\t1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；\n\t2.某些类即使和AIDL文件在同一个包中也要显式import进来；\n\t3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；\n\t4.AIDL接口中支持方法，不支持声明静态变量；\n\t5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。\n\t6.RemoteCallbackList是系统提供来删除跨进程Listener的接口。是一个泛型，可以管理任何的ALDL接口。\n\n 4、ContentProvider：\n\n\t1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；\n\t2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；\n\t3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；\n\t4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；\n\n 5、Socket：Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。 \n\n 6、文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。\n\n ### Binder连接池\n\t\n如果项目规模较大，创建过多的Service是不合理的，因为service是系统资源，过多的service会使得应用看起来很重，所以最好的做法是将所有的AIDL放在同一个Service中去管理。其工作机制是：每一个业务模块创建自己的AIDL接口并实现此接口，此时不同业务模块之间不能有耦合，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。\nBinder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。","slug":"IPC机制","published":1,"updated":"2016-04-18T13:14:32.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin62199f0001aww4ckl2b0vw","content":"<p><strong>Android IPC机制</strong></p>\n<p>在任何一个操作系统中都需要IPC机制的存在，例如：Linux中通过共享内存、命名通道等来实现进程间的通信。然而在Android系统中是什么来实现呢？答案是Binder。当然，不仅使用了Binder机制来实现了IPC,还使用了Socket实现不同终端之间的通信。</p>\n<h3 id=\"IPC介绍\"><a href=\"#IPC介绍\" class=\"headerlink\" title=\"IPC介绍\"></a>IPC介绍</h3><p>1、Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。</p>\n<p>2、serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值：<br>    1.静态成员变量属于类不属于对象，所以不参与序列化过程；<br>    2.声明为transient的成员变量不参与序列化过程。<br>    3.Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等</p>\n<h3 id=\"实现IPC的方式\"><a href=\"#实现IPC的方式\" class=\"headerlink\" title=\"实现IPC的方式\"></a>实现IPC的方式</h3><p>1、 Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。</p>\n<p>2、 Messenger：Messenger是一种轻量级的IPC方案，其底层是用AIDL实现的。Messenger是以串行的方式处理请求的，服务端只能一个个处理，不能并发执行。</p>\n<p>3、 AIDL：第一步创建一个Service和一个AIDL接口，第二步创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，然后在Service的onBind方法中返回这个类的对象，再在客户端绑定服务端Service，建立连接后就可以访问远程服务端的方法。</p>\n<pre><code>1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；\n2.某些类即使和AIDL文件在同一个包中也要显式import进来；\n3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；\n4.AIDL接口中支持方法，不支持声明静态变量；\n5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。\n6.RemoteCallbackList是系统提供来删除跨进程Listener的接口。是一个泛型，可以管理任何的ALDL接口。\n</code></pre><p> 4、ContentProvider：</p>\n<pre><code>1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；\n2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；\n3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；\n4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；\n</code></pre><p> 5、Socket：Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。 </p>\n<p> 6、文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。</p>\n<h3 id=\"Binder连接池\"><a href=\"#Binder连接池\" class=\"headerlink\" title=\"Binder连接池\"></a>Binder连接池</h3><p>如果项目规模较大，创建过多的Service是不合理的，因为service是系统资源，过多的service会使得应用看起来很重，所以最好的做法是将所有的AIDL放在同一个Service中去管理。其工作机制是：每一个业务模块创建自己的AIDL接口并实现此接口，此时不同业务模块之间不能有耦合，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。<br>Binder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。</p>\n","excerpt":"","more":"<p><strong>Android IPC机制</strong></p>\n<p>在任何一个操作系统中都需要IPC机制的存在，例如：Linux中通过共享内存、命名通道等来实现进程间的通信。然而在Android系统中是什么来实现呢？答案是Binder。当然，不仅使用了Binder机制来实现了IPC,还使用了Socket实现不同终端之间的通信。</p>\n<h3 id=\"IPC介绍\"><a href=\"#IPC介绍\" class=\"headerlink\" title=\"IPC介绍\"></a>IPC介绍</h3><p>1、Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。</p>\n<p>2、serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值：<br>    1.静态成员变量属于类不属于对象，所以不参与序列化过程；<br>    2.声明为transient的成员变量不参与序列化过程。<br>    3.Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等</p>\n<h3 id=\"实现IPC的方式\"><a href=\"#实现IPC的方式\" class=\"headerlink\" title=\"实现IPC的方式\"></a>实现IPC的方式</h3><p>1、 Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。</p>\n<p>2、 Messenger：Messenger是一种轻量级的IPC方案，其底层是用AIDL实现的。Messenger是以串行的方式处理请求的，服务端只能一个个处理，不能并发执行。</p>\n<p>3、 AIDL：第一步创建一个Service和一个AIDL接口，第二步创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，然后在Service的onBind方法中返回这个类的对象，再在客户端绑定服务端Service，建立连接后就可以访问远程服务端的方法。</p>\n<pre><code>1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；\n2.某些类即使和AIDL文件在同一个包中也要显式import进来；\n3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；\n4.AIDL接口中支持方法，不支持声明静态变量；\n5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。\n6.RemoteCallbackList是系统提供来删除跨进程Listener的接口。是一个泛型，可以管理任何的ALDL接口。\n</code></pre><p> 4、ContentProvider：</p>\n<pre><code>1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；\n2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；\n3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；\n4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；\n</code></pre><p> 5、Socket：Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。 </p>\n<p> 6、文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。</p>\n<h3 id=\"Binder连接池\"><a href=\"#Binder连接池\" class=\"headerlink\" title=\"Binder连接池\"></a>Binder连接池</h3><p>如果项目规模较大，创建过多的Service是不合理的，因为service是系统资源，过多的service会使得应用看起来很重，所以最好的做法是将所有的AIDL放在同一个Service中去管理。其工作机制是：每一个业务模块创建自己的AIDL接口并实现此接口，此时不同业务模块之间不能有耦合，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。<br>Binder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。</p>\n"},{"layout":"posts","title":"Android Studio Gradle","date":"2016-04-09T13:50:04.000Z","_content":"### 简介\nAndroid Studio 使用 Gradle 构建工具，而 Gradle 继承了强大、灵活的 Ant 和 Maven 丰富的依赖管理，配置管理简单，脚本编写方便灵活，插件模块化。\n\nAndroid Studio 使用 Gradle 构建工具，Eclipse 的 ADT 插件使用的是 Ant 构建工具。因为两个构建工具的区别，导致习惯了 Eclipse 开发环境的开发者刚开始比较难适应 Android Studio。如果要迁移到 Android Studio，建议最好了解下 Gradle 构建工具。Gradle 构建工具是任务驱动型的构建工具，并且可以通过各种 Plugin 插件扩展功能以适应各种构建任务。对应 Android 项目的 Gradle 插件就是 Android Gradle Plugin。\n\n### 为什么使用\nAndroid Studio相比ADT的好处就不啰嗦了，好马配好鞍，Android Studio为什么采用Gradle作为构建工具呢？Gradle是一个优秀的构建系统和构建工具，可以通过插件来创建自定的义构建逻辑。\nGradle的优点：\n* 采用了Domain Specific Language(DSL 语言) 来描述和控制构建逻辑。\n* 构建文件基于 Groovy，并且允许通过混合声明 DSL 元素和使用代码来控制 DSL 元素以控制自定义的构建逻辑。\n* 支持 Maven 或者 Ivy 的依赖管理。\n* 非常灵活。允许使用最好的实现，但是不会强制实现的方式。\n* 插件可以提供自己的 DSL 和 API 以供构建文件使用。\n* 良好的 API 工具供 IDE 集成。\n\nGradle构建系统的目标：\n* 让重用代码和资源变得更加容易\n* 让创建同一个APP的不同版本变得更加容易，无论是多个APP发布版本还是同一个发布不同的版本\n* 让构建过程变得更加容易配置，扩展和定制\n* 整合优秀IDE\n\n### 项目的构建文件\nGradle在Android Studio的项目中是如何使用的呢？一个Gradle项目的构建过程定义在了build.gradle的文件中，在项目的根目录下，如图：\n\n![android项目](../../../../img/project.png)\n\n最简单的Android项目的build.gradle文件包含以下内容：\n\n``` java\n    buildscript {\n        repositories {\n            mavenCentral()\n        }\n\n        dependencies {\n            classpath 'com.android.tools.build:gradle:0.11.1'\n        }\n    }\n\n    apply plugin: 'android'\n\n    android {\n        compileSdkVersion 19\n        buildToolsVersion \"19.0.0\"\n    }\n```\n\n简单分析下:\n\n``` java\n    buildscrip{...} \n```\n\n配置驱动构建过程的代码，在这个部分声明了使用Maven仓库，并且声明了一个maven文件的依赖路径。这个文件就是包含了0.11.1版本android gradle插件的库。\n\n``` java\napply plugin: 'android'\n```\n\n这里添加了android插件\n\n``` java\nandroid{...} \n```\n\n这里配置android构建过程需要的参数\n\n默认情况下，只需要配置目标编译SDK版本和编译工具版本，即compileSdkVersion和buildToolsVersion属性。 这个complieSdkVersion属性相当于旧构建系统中project.properites文件中的target属性。这个新的属性可以跟旧的target属性一样指定一个int或者String类型的值。\n\n与上面基本的构建文件对应的是一个默认的文件夹结构。Gradle遵循约定优先于配置的概念，我们需要在可能的情况尽可能提供合理的默认配置参数。\n\n基本的项目开始于两个名为“source sets”的组件，即main source code和test code。分别位于：\n* src/main/\n* src/androidTest/\n里面每一个文件夹都有与之相应的源组件:\n* AndroidManifest.xml\n* res/\n* assets/\n* aidl/\n* rs/\n* jni/\n\n### 配置结构\n当默认的项目结构不适用的时候，你可能需要去配置它。根据Gradle文档，重新为Android项目sourceSets。例如：\n\n``` bash\n    android {\n        sourceSets {\n            main {\n                manifest.srcFile 'AndroidManifest.xml'\n                java.srcDirs = ['src']\n                resources.srcDirs = ['src']\n                aidl.srcDirs = ['src']\n                renderscript.srcDirs = ['src']\n                res.srcDirs = ['res']\n                assets.srcDirs = ['assets']\n            }\n\n            androidTest.setRoot('tests')\n        }\n    }\n```\n\n它使用了旧项目结构中的main源码，并且将androidTest _sourceSet_组件重新映射到_tests_文件夹。\n\n### 构建任务\n\n添加一个插件到构建文件中将会自动创建一系列构建任务(build tasks)去执行（注：gradle属于任务驱动型构建工具，它的构建过程是基于Task的）。Java plugin和Android plugin都会创建以下task：\n\n* assemble\n    这个task将会组合项目的所有输出。\n* check\n    这个task将会执行所有检查。\n* connectedCheck\n    这个task将会在一个指定的设备或者模拟器上执行检查，它们可以同时在所有连接的设备上执行。\n* deviceCheck\n    通过APIs连接远程设备来执行检查，这是在CL服务器上使用的。\n* build\n    这个task将会执行assemble和check两个task的所有工作\n* clean\n    这个task将会清空项目的输出。\n\n实际上assemble，check，build这三个task不做任何事情。它们只是一个Task标志，用来告诉android plugin添加实际需要执行的task去完成这些工作。\n\n这就允许你去调用相同的task，而不需要考虑当前是什么类型的项目，或者当前项目添加了什么plugin。 例如，添加了findbugs plugin将会创建一个新的task并且让check task依赖于这个新的task。当check task被调用的时候，这个新的task将会先被调用。\n\n在命令行环境中，你可以执行以下命令来获取更多高级别的task：\n\n    gradle tasks\n查看所有task列表和它们之间的依赖关系可以执行以下命令：\n\n    gradle tasks --all\n注意：\nGradle会自动监视一个task声明的所有输入和输出。\n两次执行build task并且期间项目没有任何改动，gradle将会使用UP-TO-DATE通知所有task。这意味着第二次build执行的时候不会请求任何task执行。这允许task之间互相依赖，而不会导致不需要的构建请求被执行。\n\n一个Android项目至少拥有两个输出：debug APK（调试版APK)和release APK（发布版APK）。每一个输出都拥有自己的标识性task以便能够单独构建它们。\n* assemble\n    * assembleDebug\n    * assembleRelease\n它们都依赖于其它一些tasks以完成构建一个APK需要多个步骤。其中assemble task依赖于这两个task，所以执行assemble将会同时构建出两个APK。\n\ncheck task也拥有自己的依赖：\n* check\n    * lint\n* connectedCheck\n    * connectedAndroidTest\n    * connectedUiAutomatorTest(目前还没有应用到）\n* deviceCheck\n    * 这个test依赖于test创建时，其它实现测试扩展点的插件。\n\n最后，只要task能够被安装（那些要求签名的task），android plugin就会为所有构建类型（debug，release，test）安装或者卸载。\n\n### 基本的构建定制\nAndroid plugin提供了大量DSL用于直接从构建系统定制大部分事情。\n\nManifest 属性\n\n通过SDL可以配置一下manifest选项：\n\n* minSdkVersion\n* targetSdkVersion\n* versionName\n* applicationId (有效的包名 -- 更多详情请查阅ApplicationId 对比 PackageName)\n* package Name for the test application\n* Instrumentation test runner\n\n例如：\n\n``` java\n    android {\n        compileSdkVersion 19\n        buildToolsVersion \"19.0.0\"\n\n        defaultConfig {\n            versionCode 12\n            versionName \"2.0\"\n            minSdkVersion 16\n            targetSdkVersion 16\n        }\n    }\n```\n在android元素中的defaultConfig元素中定义所有配置。\n\n### 构建类型\n\n默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。\n\nDebug版本采用使用通用的name/password键值对自动创建的数字证书进行签名，以防止构建过程中出现请求信息。Release版本在构建过程中没有签名，需要稍后再签名。\n\n这些配置通过一个BuildType对象来配置。默认情况下，这两个实例都会被创建，分别是一个debug版本和一个release版本。\n\nAndroid plugin允许像创建其他构建类型一样定制debug和release实例。这需要在buildTypes的DSL容器中配置：\n\n``` java\n    android {\n        buildTypes {\n            debug {\n                applicationIdSuffix \".debug\"\n            }\n\n            jnidebug.initWith(buildTypes.debug)\n            jnidebug {\n                packageNameSuffix \".jnidebug\"\n                jnidebugBuild true\n            }\n        }\n    }\n```\n以上代码片段实现了以下功能：\n* 配置默认的debug构建类型\n    * 将debug版本的包名设置为.debug以便能够同时在一台设备上安装_debug_和_release_版本的apk。\n    * 创建了一个名为jnidebug的新构建类型，并且这个构建类型是debug构建类型的一个副本。\n    * 继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。\n\n创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。\n\n### 签名配置\n\n对一个应用程序签名需要以下：\n* 一个Keystory\n* 一个keystory密码\n* 一个key的别名\n* 一个key的密码\n* 存储类型\n\n位置，键名，两个密码，还有存储类型一起形成了签名配置。\n\n默认情况下，debug被配置成使用一个debug keystory。 debug keystory使用了默认的密码和默认key及默认的key密码。 debug keystory的位置在$HOME/.android/debug.keystroe，如果对应位置不存在这个文件将会自动创建一个。\n\ndebug Build Type(构建类型) 会自动使用debug SigningConfig (签名配置)。\n\n可以创建其他配置或者自定义内建的默认配置。通过signingConfigs这个DSL容器来配置：\n\n``` java\n    android {\n        signingConfigs {\n            debug {\n                storeFile file(\"debug.keystore\")\n            }\n\n            myConfig {\n                storeFile file(\"other.keystore\")\n                storePassword \"android\"\n                keyAlias \"androiddebugkey\"\n                keyPassword \"android\"\n            }\n        }\n\n        buildTypes {\n            foo {\n                debuggable true\n                jniDebugBuild true\n                signingConfig signingConfigs.myConfig\n            }\n        }\n    }\n```\n以上代码片段修改debug keystory的路径到项目的根目录下。在这个例子中，这将自动影响其他使用到debug构建类型的构建类型。\n\n### 运行 Proguard\n\n从Gradle Plugin for ProGuard version 4.10之后就开始支持ProGuard。ProGuard插件是自动添加进来的。如果_Build Type_的_runProguard_属性被设置为true，对应的task将会自动创建。\n\n``` java\n    android {\n        buildTypes {\n            release {\n                runProguard true\n                proguardFile getDefaultProguardFile('proguard-android.txt')\n            }\n        }\n\n        productFlavors {\n            flavor1 {\n            }\n            flavor2 {\n                proguardFile 'some-other-rules.txt'\n            }\n        }\n    }\n```\n发布版本将会使用它的Build Type中声明的规则文件，product flavor（定制的产品版本）将会使用对应flavor中声明的规则文件。\n\n这里有两个默认的规则文件：\n* proguard-android.txt\n* proguard-android-optimize.txt\n\n这两个文件都在SDK的路径下。使用_getDefaultProguardFile()_可以获取这些文件的完整路径。它们除了是否要进行优化之外，其它都是相同的。","source":"_posts/Gradle.md","raw":"layout: posts\ntitle: \"Android Studio Gradle\"\ndate: 2016-04-09 21:50:04\ntags:\n    - Android \n    - 移动开发\n---\n### 简介\nAndroid Studio 使用 Gradle 构建工具，而 Gradle 继承了强大、灵活的 Ant 和 Maven 丰富的依赖管理，配置管理简单，脚本编写方便灵活，插件模块化。\n\nAndroid Studio 使用 Gradle 构建工具，Eclipse 的 ADT 插件使用的是 Ant 构建工具。因为两个构建工具的区别，导致习惯了 Eclipse 开发环境的开发者刚开始比较难适应 Android Studio。如果要迁移到 Android Studio，建议最好了解下 Gradle 构建工具。Gradle 构建工具是任务驱动型的构建工具，并且可以通过各种 Plugin 插件扩展功能以适应各种构建任务。对应 Android 项目的 Gradle 插件就是 Android Gradle Plugin。\n\n### 为什么使用\nAndroid Studio相比ADT的好处就不啰嗦了，好马配好鞍，Android Studio为什么采用Gradle作为构建工具呢？Gradle是一个优秀的构建系统和构建工具，可以通过插件来创建自定的义构建逻辑。\nGradle的优点：\n* 采用了Domain Specific Language(DSL 语言) 来描述和控制构建逻辑。\n* 构建文件基于 Groovy，并且允许通过混合声明 DSL 元素和使用代码来控制 DSL 元素以控制自定义的构建逻辑。\n* 支持 Maven 或者 Ivy 的依赖管理。\n* 非常灵活。允许使用最好的实现，但是不会强制实现的方式。\n* 插件可以提供自己的 DSL 和 API 以供构建文件使用。\n* 良好的 API 工具供 IDE 集成。\n\nGradle构建系统的目标：\n* 让重用代码和资源变得更加容易\n* 让创建同一个APP的不同版本变得更加容易，无论是多个APP发布版本还是同一个发布不同的版本\n* 让构建过程变得更加容易配置，扩展和定制\n* 整合优秀IDE\n\n### 项目的构建文件\nGradle在Android Studio的项目中是如何使用的呢？一个Gradle项目的构建过程定义在了build.gradle的文件中，在项目的根目录下，如图：\n\n![android项目](../../../../img/project.png)\n\n最简单的Android项目的build.gradle文件包含以下内容：\n\n``` java\n    buildscript {\n        repositories {\n            mavenCentral()\n        }\n\n        dependencies {\n            classpath 'com.android.tools.build:gradle:0.11.1'\n        }\n    }\n\n    apply plugin: 'android'\n\n    android {\n        compileSdkVersion 19\n        buildToolsVersion \"19.0.0\"\n    }\n```\n\n简单分析下:\n\n``` java\n    buildscrip{...} \n```\n\n配置驱动构建过程的代码，在这个部分声明了使用Maven仓库，并且声明了一个maven文件的依赖路径。这个文件就是包含了0.11.1版本android gradle插件的库。\n\n``` java\napply plugin: 'android'\n```\n\n这里添加了android插件\n\n``` java\nandroid{...} \n```\n\n这里配置android构建过程需要的参数\n\n默认情况下，只需要配置目标编译SDK版本和编译工具版本，即compileSdkVersion和buildToolsVersion属性。 这个complieSdkVersion属性相当于旧构建系统中project.properites文件中的target属性。这个新的属性可以跟旧的target属性一样指定一个int或者String类型的值。\n\n与上面基本的构建文件对应的是一个默认的文件夹结构。Gradle遵循约定优先于配置的概念，我们需要在可能的情况尽可能提供合理的默认配置参数。\n\n基本的项目开始于两个名为“source sets”的组件，即main source code和test code。分别位于：\n* src/main/\n* src/androidTest/\n里面每一个文件夹都有与之相应的源组件:\n* AndroidManifest.xml\n* res/\n* assets/\n* aidl/\n* rs/\n* jni/\n\n### 配置结构\n当默认的项目结构不适用的时候，你可能需要去配置它。根据Gradle文档，重新为Android项目sourceSets。例如：\n\n``` bash\n    android {\n        sourceSets {\n            main {\n                manifest.srcFile 'AndroidManifest.xml'\n                java.srcDirs = ['src']\n                resources.srcDirs = ['src']\n                aidl.srcDirs = ['src']\n                renderscript.srcDirs = ['src']\n                res.srcDirs = ['res']\n                assets.srcDirs = ['assets']\n            }\n\n            androidTest.setRoot('tests')\n        }\n    }\n```\n\n它使用了旧项目结构中的main源码，并且将androidTest _sourceSet_组件重新映射到_tests_文件夹。\n\n### 构建任务\n\n添加一个插件到构建文件中将会自动创建一系列构建任务(build tasks)去执行（注：gradle属于任务驱动型构建工具，它的构建过程是基于Task的）。Java plugin和Android plugin都会创建以下task：\n\n* assemble\n    这个task将会组合项目的所有输出。\n* check\n    这个task将会执行所有检查。\n* connectedCheck\n    这个task将会在一个指定的设备或者模拟器上执行检查，它们可以同时在所有连接的设备上执行。\n* deviceCheck\n    通过APIs连接远程设备来执行检查，这是在CL服务器上使用的。\n* build\n    这个task将会执行assemble和check两个task的所有工作\n* clean\n    这个task将会清空项目的输出。\n\n实际上assemble，check，build这三个task不做任何事情。它们只是一个Task标志，用来告诉android plugin添加实际需要执行的task去完成这些工作。\n\n这就允许你去调用相同的task，而不需要考虑当前是什么类型的项目，或者当前项目添加了什么plugin。 例如，添加了findbugs plugin将会创建一个新的task并且让check task依赖于这个新的task。当check task被调用的时候，这个新的task将会先被调用。\n\n在命令行环境中，你可以执行以下命令来获取更多高级别的task：\n\n    gradle tasks\n查看所有task列表和它们之间的依赖关系可以执行以下命令：\n\n    gradle tasks --all\n注意：\nGradle会自动监视一个task声明的所有输入和输出。\n两次执行build task并且期间项目没有任何改动，gradle将会使用UP-TO-DATE通知所有task。这意味着第二次build执行的时候不会请求任何task执行。这允许task之间互相依赖，而不会导致不需要的构建请求被执行。\n\n一个Android项目至少拥有两个输出：debug APK（调试版APK)和release APK（发布版APK）。每一个输出都拥有自己的标识性task以便能够单独构建它们。\n* assemble\n    * assembleDebug\n    * assembleRelease\n它们都依赖于其它一些tasks以完成构建一个APK需要多个步骤。其中assemble task依赖于这两个task，所以执行assemble将会同时构建出两个APK。\n\ncheck task也拥有自己的依赖：\n* check\n    * lint\n* connectedCheck\n    * connectedAndroidTest\n    * connectedUiAutomatorTest(目前还没有应用到）\n* deviceCheck\n    * 这个test依赖于test创建时，其它实现测试扩展点的插件。\n\n最后，只要task能够被安装（那些要求签名的task），android plugin就会为所有构建类型（debug，release，test）安装或者卸载。\n\n### 基本的构建定制\nAndroid plugin提供了大量DSL用于直接从构建系统定制大部分事情。\n\nManifest 属性\n\n通过SDL可以配置一下manifest选项：\n\n* minSdkVersion\n* targetSdkVersion\n* versionName\n* applicationId (有效的包名 -- 更多详情请查阅ApplicationId 对比 PackageName)\n* package Name for the test application\n* Instrumentation test runner\n\n例如：\n\n``` java\n    android {\n        compileSdkVersion 19\n        buildToolsVersion \"19.0.0\"\n\n        defaultConfig {\n            versionCode 12\n            versionName \"2.0\"\n            minSdkVersion 16\n            targetSdkVersion 16\n        }\n    }\n```\n在android元素中的defaultConfig元素中定义所有配置。\n\n### 构建类型\n\n默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。\n\nDebug版本采用使用通用的name/password键值对自动创建的数字证书进行签名，以防止构建过程中出现请求信息。Release版本在构建过程中没有签名，需要稍后再签名。\n\n这些配置通过一个BuildType对象来配置。默认情况下，这两个实例都会被创建，分别是一个debug版本和一个release版本。\n\nAndroid plugin允许像创建其他构建类型一样定制debug和release实例。这需要在buildTypes的DSL容器中配置：\n\n``` java\n    android {\n        buildTypes {\n            debug {\n                applicationIdSuffix \".debug\"\n            }\n\n            jnidebug.initWith(buildTypes.debug)\n            jnidebug {\n                packageNameSuffix \".jnidebug\"\n                jnidebugBuild true\n            }\n        }\n    }\n```\n以上代码片段实现了以下功能：\n* 配置默认的debug构建类型\n    * 将debug版本的包名设置为.debug以便能够同时在一台设备上安装_debug_和_release_版本的apk。\n    * 创建了一个名为jnidebug的新构建类型，并且这个构建类型是debug构建类型的一个副本。\n    * 继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。\n\n创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。\n\n### 签名配置\n\n对一个应用程序签名需要以下：\n* 一个Keystory\n* 一个keystory密码\n* 一个key的别名\n* 一个key的密码\n* 存储类型\n\n位置，键名，两个密码，还有存储类型一起形成了签名配置。\n\n默认情况下，debug被配置成使用一个debug keystory。 debug keystory使用了默认的密码和默认key及默认的key密码。 debug keystory的位置在$HOME/.android/debug.keystroe，如果对应位置不存在这个文件将会自动创建一个。\n\ndebug Build Type(构建类型) 会自动使用debug SigningConfig (签名配置)。\n\n可以创建其他配置或者自定义内建的默认配置。通过signingConfigs这个DSL容器来配置：\n\n``` java\n    android {\n        signingConfigs {\n            debug {\n                storeFile file(\"debug.keystore\")\n            }\n\n            myConfig {\n                storeFile file(\"other.keystore\")\n                storePassword \"android\"\n                keyAlias \"androiddebugkey\"\n                keyPassword \"android\"\n            }\n        }\n\n        buildTypes {\n            foo {\n                debuggable true\n                jniDebugBuild true\n                signingConfig signingConfigs.myConfig\n            }\n        }\n    }\n```\n以上代码片段修改debug keystory的路径到项目的根目录下。在这个例子中，这将自动影响其他使用到debug构建类型的构建类型。\n\n### 运行 Proguard\n\n从Gradle Plugin for ProGuard version 4.10之后就开始支持ProGuard。ProGuard插件是自动添加进来的。如果_Build Type_的_runProguard_属性被设置为true，对应的task将会自动创建。\n\n``` java\n    android {\n        buildTypes {\n            release {\n                runProguard true\n                proguardFile getDefaultProguardFile('proguard-android.txt')\n            }\n        }\n\n        productFlavors {\n            flavor1 {\n            }\n            flavor2 {\n                proguardFile 'some-other-rules.txt'\n            }\n        }\n    }\n```\n发布版本将会使用它的Build Type中声明的规则文件，product flavor（定制的产品版本）将会使用对应flavor中声明的规则文件。\n\n这里有两个默认的规则文件：\n* proguard-android.txt\n* proguard-android-optimize.txt\n\n这两个文件都在SDK的路径下。使用_getDefaultProguardFile()_可以获取这些文件的完整路径。它们除了是否要进行优化之外，其它都是相同的。","slug":"Gradle","published":1,"updated":"2016-04-09T15:40:23.023Z","comments":1,"photos":[],"link":"","_id":"cin62199m0003aww4fq60e7gl","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Android Studio 使用 Gradle 构建工具，而 Gradle 继承了强大、灵活的 Ant 和 Maven 丰富的依赖管理，配置管理简单，脚本编写方便灵活，插件模块化。</p>\n<p>Android Studio 使用 Gradle 构建工具，Eclipse 的 ADT 插件使用的是 Ant 构建工具。因为两个构建工具的区别，导致习惯了 Eclipse 开发环境的开发者刚开始比较难适应 Android Studio。如果要迁移到 Android Studio，建议最好了解下 Gradle 构建工具。Gradle 构建工具是任务驱动型的构建工具，并且可以通过各种 Plugin 插件扩展功能以适应各种构建任务。对应 Android 项目的 Gradle 插件就是 Android Gradle Plugin。</p>\n<h3 id=\"为什么使用\"><a href=\"#为什么使用\" class=\"headerlink\" title=\"为什么使用\"></a>为什么使用</h3><p>Android Studio相比ADT的好处就不啰嗦了，好马配好鞍，Android Studio为什么采用Gradle作为构建工具呢？Gradle是一个优秀的构建系统和构建工具，可以通过插件来创建自定的义构建逻辑。<br>Gradle的优点：</p>\n<ul>\n<li>采用了Domain Specific Language(DSL 语言) 来描述和控制构建逻辑。</li>\n<li>构建文件基于 Groovy，并且允许通过混合声明 DSL 元素和使用代码来控制 DSL 元素以控制自定义的构建逻辑。</li>\n<li>支持 Maven 或者 Ivy 的依赖管理。</li>\n<li>非常灵活。允许使用最好的实现，但是不会强制实现的方式。</li>\n<li>插件可以提供自己的 DSL 和 API 以供构建文件使用。</li>\n<li>良好的 API 工具供 IDE 集成。</li>\n</ul>\n<p>Gradle构建系统的目标：</p>\n<ul>\n<li>让重用代码和资源变得更加容易</li>\n<li>让创建同一个APP的不同版本变得更加容易，无论是多个APP发布版本还是同一个发布不同的版本</li>\n<li>让构建过程变得更加容易配置，扩展和定制</li>\n<li>整合优秀IDE</li>\n</ul>\n<h3 id=\"项目的构建文件\"><a href=\"#项目的构建文件\" class=\"headerlink\" title=\"项目的构建文件\"></a>项目的构建文件</h3><p>Gradle在Android Studio的项目中是如何使用的呢？一个Gradle项目的构建过程定义在了build.gradle的文件中，在项目的根目录下，如图：</p>\n<p><img src=\"../../../../img/project.png\" alt=\"android项目\"></p>\n<p>最简单的Android项目的build.gradle文件包含以下内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">'com.android.tools.build:gradle:0.11.1'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: <span class=\"string\">'android'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">19</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"19.0.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单分析下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscrip&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>配置驱动构建过程的代码，在这个部分声明了使用Maven仓库，并且声明了一个maven文件的依赖路径。这个文件就是包含了0.11.1版本android gradle插件的库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'android'</span></span><br></pre></td></tr></table></figure>\n<p>这里添加了android插件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>这里配置android构建过程需要的参数</p>\n<p>默认情况下，只需要配置目标编译SDK版本和编译工具版本，即compileSdkVersion和buildToolsVersion属性。 这个complieSdkVersion属性相当于旧构建系统中project.properites文件中的target属性。这个新的属性可以跟旧的target属性一样指定一个int或者String类型的值。</p>\n<p>与上面基本的构建文件对应的是一个默认的文件夹结构。Gradle遵循约定优先于配置的概念，我们需要在可能的情况尽可能提供合理的默认配置参数。</p>\n<p>基本的项目开始于两个名为“source sets”的组件，即main source code和test code。分别位于：</p>\n<ul>\n<li>src/main/</li>\n<li>src/androidTest/<br>里面每一个文件夹都有与之相应的源组件:</li>\n<li>AndroidManifest.xml</li>\n<li>res/</li>\n<li>assets/</li>\n<li>aidl/</li>\n<li>rs/</li>\n<li>jni/</li>\n</ul>\n<h3 id=\"配置结构\"><a href=\"#配置结构\" class=\"headerlink\" title=\"配置结构\"></a>配置结构</h3><p>当默认的项目结构不适用的时候，你可能需要去配置它。根据Gradle文档，重新为Android项目sourceSets。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    <span class=\"built_in\">source</span>Sets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            manifest.srcFile <span class=\"string\">'AndroidManifest.xml'</span></span><br><span class=\"line\">            java.srcDirs = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            resources.srcDirs = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            aidl.srcDirs = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            renderscript.srcDirs = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            res.srcDirs = [<span class=\"string\">'res'</span>]</span><br><span class=\"line\">            assets.srcDirs = [<span class=\"string\">'assets'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        androidTest.setRoot(<span class=\"string\">'tests'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它使用了旧项目结构中的main源码，并且将androidTest <em>sourceSet</em>组件重新映射到<em>tests</em>文件夹。</p>\n<h3 id=\"构建任务\"><a href=\"#构建任务\" class=\"headerlink\" title=\"构建任务\"></a>构建任务</h3><p>添加一个插件到构建文件中将会自动创建一系列构建任务(build tasks)去执行（注：gradle属于任务驱动型构建工具，它的构建过程是基于Task的）。Java plugin和Android plugin都会创建以下task：</p>\n<ul>\n<li>assemble<br>  这个task将会组合项目的所有输出。</li>\n<li>check<br>  这个task将会执行所有检查。</li>\n<li>connectedCheck<br>  这个task将会在一个指定的设备或者模拟器上执行检查，它们可以同时在所有连接的设备上执行。</li>\n<li>deviceCheck<br>  通过APIs连接远程设备来执行检查，这是在CL服务器上使用的。</li>\n<li>build<br>  这个task将会执行assemble和check两个task的所有工作</li>\n<li>clean<br>  这个task将会清空项目的输出。</li>\n</ul>\n<p>实际上assemble，check，build这三个task不做任何事情。它们只是一个Task标志，用来告诉android plugin添加实际需要执行的task去完成这些工作。</p>\n<p>这就允许你去调用相同的task，而不需要考虑当前是什么类型的项目，或者当前项目添加了什么plugin。 例如，添加了findbugs plugin将会创建一个新的task并且让check task依赖于这个新的task。当check task被调用的时候，这个新的task将会先被调用。</p>\n<p>在命令行环境中，你可以执行以下命令来获取更多高级别的task：</p>\n<pre><code>gradle tasks\n</code></pre><p>查看所有task列表和它们之间的依赖关系可以执行以下命令：</p>\n<pre><code>gradle tasks --all\n</code></pre><p>注意：<br>Gradle会自动监视一个task声明的所有输入和输出。<br>两次执行build task并且期间项目没有任何改动，gradle将会使用UP-TO-DATE通知所有task。这意味着第二次build执行的时候不会请求任何task执行。这允许task之间互相依赖，而不会导致不需要的构建请求被执行。</p>\n<p>一个Android项目至少拥有两个输出：debug APK（调试版APK)和release APK（发布版APK）。每一个输出都拥有自己的标识性task以便能够单独构建它们。</p>\n<ul>\n<li>assemble<ul>\n<li>assembleDebug</li>\n<li>assembleRelease<br>它们都依赖于其它一些tasks以完成构建一个APK需要多个步骤。其中assemble task依赖于这两个task，所以执行assemble将会同时构建出两个APK。</li>\n</ul>\n</li>\n</ul>\n<p>check task也拥有自己的依赖：</p>\n<ul>\n<li>check<ul>\n<li>lint</li>\n</ul>\n</li>\n<li>connectedCheck<ul>\n<li>connectedAndroidTest</li>\n<li>connectedUiAutomatorTest(目前还没有应用到）</li>\n</ul>\n</li>\n<li>deviceCheck<ul>\n<li>这个test依赖于test创建时，其它实现测试扩展点的插件。</li>\n</ul>\n</li>\n</ul>\n<p>最后，只要task能够被安装（那些要求签名的task），android plugin就会为所有构建类型（debug，release，test）安装或者卸载。</p>\n<h3 id=\"基本的构建定制\"><a href=\"#基本的构建定制\" class=\"headerlink\" title=\"基本的构建定制\"></a>基本的构建定制</h3><p>Android plugin提供了大量DSL用于直接从构建系统定制大部分事情。</p>\n<p>Manifest 属性</p>\n<p>通过SDL可以配置一下manifest选项：</p>\n<ul>\n<li>minSdkVersion</li>\n<li>targetSdkVersion</li>\n<li>versionName</li>\n<li>applicationId (有效的包名 – 更多详情请查阅ApplicationId 对比 PackageName)</li>\n<li>package Name for the test application</li>\n<li>Instrumentation test runner</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">19</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"19.0.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        versionCode <span class=\"number\">12</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"2.0\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">16</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">16</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在android元素中的defaultConfig元素中定义所有配置。</p>\n<h3 id=\"构建类型\"><a href=\"#构建类型\" class=\"headerlink\" title=\"构建类型\"></a>构建类型</h3><p>默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。</p>\n<p>Debug版本采用使用通用的name/password键值对自动创建的数字证书进行签名，以防止构建过程中出现请求信息。Release版本在构建过程中没有签名，需要稍后再签名。</p>\n<p>这些配置通过一个BuildType对象来配置。默认情况下，这两个实例都会被创建，分别是一个debug版本和一个release版本。</p>\n<p>Android plugin允许像创建其他构建类型一样定制debug和release实例。这需要在buildTypes的DSL容器中配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            applicationIdSuffix <span class=\"string\">\".debug\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        jnidebug.initWith(buildTypes.debug)</span><br><span class=\"line\">        jnidebug &#123;</span><br><span class=\"line\">            packageNameSuffix <span class=\"string\">\".jnidebug\"</span></span><br><span class=\"line\">            jnidebugBuild <span class=\"keyword\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码片段实现了以下功能：</p>\n<ul>\n<li>配置默认的debug构建类型<ul>\n<li>将debug版本的包名设置为.debug以便能够同时在一台设备上安装<em>debug</em>和<em>release</em>版本的apk。</li>\n<li>创建了一个名为jnidebug的新构建类型，并且这个构建类型是debug构建类型的一个副本。</li>\n<li>继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。</li>\n</ul>\n</li>\n</ul>\n<p>创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。</p>\n<h3 id=\"签名配置\"><a href=\"#签名配置\" class=\"headerlink\" title=\"签名配置\"></a>签名配置</h3><p>对一个应用程序签名需要以下：</p>\n<ul>\n<li>一个Keystory</li>\n<li>一个keystory密码</li>\n<li>一个key的别名</li>\n<li>一个key的密码</li>\n<li>存储类型</li>\n</ul>\n<p>位置，键名，两个密码，还有存储类型一起形成了签名配置。</p>\n<p>默认情况下，debug被配置成使用一个debug keystory。 debug keystory使用了默认的密码和默认key及默认的key密码。 debug keystory的位置在$HOME/.android/debug.keystroe，如果对应位置不存在这个文件将会自动创建一个。</p>\n<p>debug Build Type(构建类型) 会自动使用debug SigningConfig (签名配置)。</p>\n<p>可以创建其他配置或者自定义内建的默认配置。通过signingConfigs这个DSL容器来配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    signingConfigs &#123;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            <span class=\"function\">storeFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">\"debug.keystore\"</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        myConfig </span>&#123;</span><br><span class=\"line\">            <span class=\"function\">storeFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">\"other.keystore\"</span>)</span></span><br><span class=\"line\">            storePassword \"android\"</span><br><span class=\"line\">            keyAlias \"androiddebugkey\"</span><br><span class=\"line\">            keyPassword \"android\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buildTypes </span>&#123;</span><br><span class=\"line\">        foo &#123;</span><br><span class=\"line\">            debuggable <span class=\"keyword\">true</span></span><br><span class=\"line\">            jniDebugBuild <span class=\"keyword\">true</span></span><br><span class=\"line\">            signingConfig signingConfigs.myConfig</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码片段修改debug keystory的路径到项目的根目录下。在这个例子中，这将自动影响其他使用到debug构建类型的构建类型。</p>\n<h3 id=\"运行-Proguard\"><a href=\"#运行-Proguard\" class=\"headerlink\" title=\"运行 Proguard\"></a>运行 Proguard</h3><p>从Gradle Plugin for ProGuard version 4.10之后就开始支持ProGuard。ProGuard插件是自动添加进来的。如果<em>Build Type</em>的<em>runProguard</em>属性被设置为true，对应的task将会自动创建。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            <span class=\"function\">runProguard <span class=\"keyword\">true</span></span><br><span class=\"line\">            proguardFile <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    productFlavors </span>&#123;</span><br><span class=\"line\">        flavor1 &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flavor2 &#123;</span><br><span class=\"line\">            proguardFile <span class=\"string\">'some-other-rules.txt'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发布版本将会使用它的Build Type中声明的规则文件，product flavor（定制的产品版本）将会使用对应flavor中声明的规则文件。</p>\n<p>这里有两个默认的规则文件：</p>\n<ul>\n<li>proguard-android.txt</li>\n<li>proguard-android-optimize.txt</li>\n</ul>\n<p>这两个文件都在SDK的路径下。使用<em>getDefaultProguardFile()</em>可以获取这些文件的完整路径。它们除了是否要进行优化之外，其它都是相同的。</p>\n","excerpt":"","more":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Android Studio 使用 Gradle 构建工具，而 Gradle 继承了强大、灵活的 Ant 和 Maven 丰富的依赖管理，配置管理简单，脚本编写方便灵活，插件模块化。</p>\n<p>Android Studio 使用 Gradle 构建工具，Eclipse 的 ADT 插件使用的是 Ant 构建工具。因为两个构建工具的区别，导致习惯了 Eclipse 开发环境的开发者刚开始比较难适应 Android Studio。如果要迁移到 Android Studio，建议最好了解下 Gradle 构建工具。Gradle 构建工具是任务驱动型的构建工具，并且可以通过各种 Plugin 插件扩展功能以适应各种构建任务。对应 Android 项目的 Gradle 插件就是 Android Gradle Plugin。</p>\n<h3 id=\"为什么使用\"><a href=\"#为什么使用\" class=\"headerlink\" title=\"为什么使用\"></a>为什么使用</h3><p>Android Studio相比ADT的好处就不啰嗦了，好马配好鞍，Android Studio为什么采用Gradle作为构建工具呢？Gradle是一个优秀的构建系统和构建工具，可以通过插件来创建自定的义构建逻辑。<br>Gradle的优点：</p>\n<ul>\n<li>采用了Domain Specific Language(DSL 语言) 来描述和控制构建逻辑。</li>\n<li>构建文件基于 Groovy，并且允许通过混合声明 DSL 元素和使用代码来控制 DSL 元素以控制自定义的构建逻辑。</li>\n<li>支持 Maven 或者 Ivy 的依赖管理。</li>\n<li>非常灵活。允许使用最好的实现，但是不会强制实现的方式。</li>\n<li>插件可以提供自己的 DSL 和 API 以供构建文件使用。</li>\n<li>良好的 API 工具供 IDE 集成。</li>\n</ul>\n<p>Gradle构建系统的目标：</p>\n<ul>\n<li>让重用代码和资源变得更加容易</li>\n<li>让创建同一个APP的不同版本变得更加容易，无论是多个APP发布版本还是同一个发布不同的版本</li>\n<li>让构建过程变得更加容易配置，扩展和定制</li>\n<li>整合优秀IDE</li>\n</ul>\n<h3 id=\"项目的构建文件\"><a href=\"#项目的构建文件\" class=\"headerlink\" title=\"项目的构建文件\"></a>项目的构建文件</h3><p>Gradle在Android Studio的项目中是如何使用的呢？一个Gradle项目的构建过程定义在了build.gradle的文件中，在项目的根目录下，如图：</p>\n<p><img src=\"../../../../img/project.png\" alt=\"android项目\"></p>\n<p>最简单的Android项目的build.gradle文件包含以下内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">'com.android.tools.build:gradle:0.11.1'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: <span class=\"string\">'android'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">19</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"19.0.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单分析下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscrip&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>配置驱动构建过程的代码，在这个部分声明了使用Maven仓库，并且声明了一个maven文件的依赖路径。这个文件就是包含了0.11.1版本android gradle插件的库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'android'</span></span><br></pre></td></tr></table></figure>\n<p>这里添加了android插件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>这里配置android构建过程需要的参数</p>\n<p>默认情况下，只需要配置目标编译SDK版本和编译工具版本，即compileSdkVersion和buildToolsVersion属性。 这个complieSdkVersion属性相当于旧构建系统中project.properites文件中的target属性。这个新的属性可以跟旧的target属性一样指定一个int或者String类型的值。</p>\n<p>与上面基本的构建文件对应的是一个默认的文件夹结构。Gradle遵循约定优先于配置的概念，我们需要在可能的情况尽可能提供合理的默认配置参数。</p>\n<p>基本的项目开始于两个名为“source sets”的组件，即main source code和test code。分别位于：</p>\n<ul>\n<li>src/main/</li>\n<li>src/androidTest/<br>里面每一个文件夹都有与之相应的源组件:</li>\n<li>AndroidManifest.xml</li>\n<li>res/</li>\n<li>assets/</li>\n<li>aidl/</li>\n<li>rs/</li>\n<li>jni/</li>\n</ul>\n<h3 id=\"配置结构\"><a href=\"#配置结构\" class=\"headerlink\" title=\"配置结构\"></a>配置结构</h3><p>当默认的项目结构不适用的时候，你可能需要去配置它。根据Gradle文档，重新为Android项目sourceSets。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    <span class=\"built_in\">source</span>Sets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            manifest.srcFile <span class=\"string\">'AndroidManifest.xml'</span></span><br><span class=\"line\">            java.srcDirs = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            resources.srcDirs = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            aidl.srcDirs = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            renderscript.srcDirs = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            res.srcDirs = [<span class=\"string\">'res'</span>]</span><br><span class=\"line\">            assets.srcDirs = [<span class=\"string\">'assets'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        androidTest.setRoot(<span class=\"string\">'tests'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它使用了旧项目结构中的main源码，并且将androidTest <em>sourceSet</em>组件重新映射到<em>tests</em>文件夹。</p>\n<h3 id=\"构建任务\"><a href=\"#构建任务\" class=\"headerlink\" title=\"构建任务\"></a>构建任务</h3><p>添加一个插件到构建文件中将会自动创建一系列构建任务(build tasks)去执行（注：gradle属于任务驱动型构建工具，它的构建过程是基于Task的）。Java plugin和Android plugin都会创建以下task：</p>\n<ul>\n<li>assemble<br>  这个task将会组合项目的所有输出。</li>\n<li>check<br>  这个task将会执行所有检查。</li>\n<li>connectedCheck<br>  这个task将会在一个指定的设备或者模拟器上执行检查，它们可以同时在所有连接的设备上执行。</li>\n<li>deviceCheck<br>  通过APIs连接远程设备来执行检查，这是在CL服务器上使用的。</li>\n<li>build<br>  这个task将会执行assemble和check两个task的所有工作</li>\n<li>clean<br>  这个task将会清空项目的输出。</li>\n</ul>\n<p>实际上assemble，check，build这三个task不做任何事情。它们只是一个Task标志，用来告诉android plugin添加实际需要执行的task去完成这些工作。</p>\n<p>这就允许你去调用相同的task，而不需要考虑当前是什么类型的项目，或者当前项目添加了什么plugin。 例如，添加了findbugs plugin将会创建一个新的task并且让check task依赖于这个新的task。当check task被调用的时候，这个新的task将会先被调用。</p>\n<p>在命令行环境中，你可以执行以下命令来获取更多高级别的task：</p>\n<pre><code>gradle tasks\n</code></pre><p>查看所有task列表和它们之间的依赖关系可以执行以下命令：</p>\n<pre><code>gradle tasks --all\n</code></pre><p>注意：<br>Gradle会自动监视一个task声明的所有输入和输出。<br>两次执行build task并且期间项目没有任何改动，gradle将会使用UP-TO-DATE通知所有task。这意味着第二次build执行的时候不会请求任何task执行。这允许task之间互相依赖，而不会导致不需要的构建请求被执行。</p>\n<p>一个Android项目至少拥有两个输出：debug APK（调试版APK)和release APK（发布版APK）。每一个输出都拥有自己的标识性task以便能够单独构建它们。</p>\n<ul>\n<li>assemble<ul>\n<li>assembleDebug</li>\n<li>assembleRelease<br>它们都依赖于其它一些tasks以完成构建一个APK需要多个步骤。其中assemble task依赖于这两个task，所以执行assemble将会同时构建出两个APK。</li>\n</ul>\n</li>\n</ul>\n<p>check task也拥有自己的依赖：</p>\n<ul>\n<li>check<ul>\n<li>lint</li>\n</ul>\n</li>\n<li>connectedCheck<ul>\n<li>connectedAndroidTest</li>\n<li>connectedUiAutomatorTest(目前还没有应用到）</li>\n</ul>\n</li>\n<li>deviceCheck<ul>\n<li>这个test依赖于test创建时，其它实现测试扩展点的插件。</li>\n</ul>\n</li>\n</ul>\n<p>最后，只要task能够被安装（那些要求签名的task），android plugin就会为所有构建类型（debug，release，test）安装或者卸载。</p>\n<h3 id=\"基本的构建定制\"><a href=\"#基本的构建定制\" class=\"headerlink\" title=\"基本的构建定制\"></a>基本的构建定制</h3><p>Android plugin提供了大量DSL用于直接从构建系统定制大部分事情。</p>\n<p>Manifest 属性</p>\n<p>通过SDL可以配置一下manifest选项：</p>\n<ul>\n<li>minSdkVersion</li>\n<li>targetSdkVersion</li>\n<li>versionName</li>\n<li>applicationId (有效的包名 – 更多详情请查阅ApplicationId 对比 PackageName)</li>\n<li>package Name for the test application</li>\n<li>Instrumentation test runner</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">19</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"19.0.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        versionCode <span class=\"number\">12</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"2.0\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">16</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">16</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在android元素中的defaultConfig元素中定义所有配置。</p>\n<h3 id=\"构建类型\"><a href=\"#构建类型\" class=\"headerlink\" title=\"构建类型\"></a>构建类型</h3><p>默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。</p>\n<p>Debug版本采用使用通用的name/password键值对自动创建的数字证书进行签名，以防止构建过程中出现请求信息。Release版本在构建过程中没有签名，需要稍后再签名。</p>\n<p>这些配置通过一个BuildType对象来配置。默认情况下，这两个实例都会被创建，分别是一个debug版本和一个release版本。</p>\n<p>Android plugin允许像创建其他构建类型一样定制debug和release实例。这需要在buildTypes的DSL容器中配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            applicationIdSuffix <span class=\"string\">\".debug\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        jnidebug.initWith(buildTypes.debug)</span><br><span class=\"line\">        jnidebug &#123;</span><br><span class=\"line\">            packageNameSuffix <span class=\"string\">\".jnidebug\"</span></span><br><span class=\"line\">            jnidebugBuild <span class=\"keyword\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码片段实现了以下功能：</p>\n<ul>\n<li>配置默认的debug构建类型<ul>\n<li>将debug版本的包名设置为.debug以便能够同时在一台设备上安装<em>debug</em>和<em>release</em>版本的apk。</li>\n<li>创建了一个名为jnidebug的新构建类型，并且这个构建类型是debug构建类型的一个副本。</li>\n<li>继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。</li>\n</ul>\n</li>\n</ul>\n<p>创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。</p>\n<h3 id=\"签名配置\"><a href=\"#签名配置\" class=\"headerlink\" title=\"签名配置\"></a>签名配置</h3><p>对一个应用程序签名需要以下：</p>\n<ul>\n<li>一个Keystory</li>\n<li>一个keystory密码</li>\n<li>一个key的别名</li>\n<li>一个key的密码</li>\n<li>存储类型</li>\n</ul>\n<p>位置，键名，两个密码，还有存储类型一起形成了签名配置。</p>\n<p>默认情况下，debug被配置成使用一个debug keystory。 debug keystory使用了默认的密码和默认key及默认的key密码。 debug keystory的位置在$HOME/.android/debug.keystroe，如果对应位置不存在这个文件将会自动创建一个。</p>\n<p>debug Build Type(构建类型) 会自动使用debug SigningConfig (签名配置)。</p>\n<p>可以创建其他配置或者自定义内建的默认配置。通过signingConfigs这个DSL容器来配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    signingConfigs &#123;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            <span class=\"function\">storeFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">\"debug.keystore\"</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        myConfig </span>&#123;</span><br><span class=\"line\">            <span class=\"function\">storeFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">\"other.keystore\"</span>)</span></span><br><span class=\"line\">            storePassword \"android\"</span><br><span class=\"line\">            keyAlias \"androiddebugkey\"</span><br><span class=\"line\">            keyPassword \"android\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buildTypes </span>&#123;</span><br><span class=\"line\">        foo &#123;</span><br><span class=\"line\">            debuggable <span class=\"keyword\">true</span></span><br><span class=\"line\">            jniDebugBuild <span class=\"keyword\">true</span></span><br><span class=\"line\">            signingConfig signingConfigs.myConfig</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码片段修改debug keystory的路径到项目的根目录下。在这个例子中，这将自动影响其他使用到debug构建类型的构建类型。</p>\n<h3 id=\"运行-Proguard\"><a href=\"#运行-Proguard\" class=\"headerlink\" title=\"运行 Proguard\"></a>运行 Proguard</h3><p>从Gradle Plugin for ProGuard version 4.10之后就开始支持ProGuard。ProGuard插件是自动添加进来的。如果<em>Build Type</em>的<em>runProguard</em>属性被设置为true，对应的task将会自动创建。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            <span class=\"function\">runProguard <span class=\"keyword\">true</span></span><br><span class=\"line\">            proguardFile <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    productFlavors </span>&#123;</span><br><span class=\"line\">        flavor1 &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flavor2 &#123;</span><br><span class=\"line\">            proguardFile <span class=\"string\">'some-other-rules.txt'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发布版本将会使用它的Build Type中声明的规则文件，product flavor（定制的产品版本）将会使用对应flavor中声明的规则文件。</p>\n<p>这里有两个默认的规则文件：</p>\n<ul>\n<li>proguard-android.txt</li>\n<li>proguard-android-optimize.txt</li>\n</ul>\n<p>这两个文件都在SDK的路径下。使用<em>getDefaultProguardFile()</em>可以获取这些文件的完整路径。它们除了是否要进行优化之外，其它都是相同的。</p>\n"},{"layout":"posts","title":"Android 6.0 动态权限管理","date":"2016-04-08T06:16:09.000Z","_content":"\n随着Android6.0的发布，更多的新特性被推出，极大的提升了用户体验，但同时也做了一些改变，对开发人员带来了一定的麻烦。\n\nAndroid 6.0在我们原有的AndroidManifest.xml声明权限的基础上，又新增了运行时权限动态检测，以下权限都需要在运行时判断：\n\n``` bash\n身体传感器\n日历\n摄像头\n通讯录\n地理位置\n麦克风\n电话\n短信\n存储空间\n```\n\n### 运行时权限处理\nAndroid6.0系统默认为targetSdkVersion小于23的应用默认授予了所申请的所有权限，所以如果你以前的APP设置的targetSdkVersion低于23，在运行时也不会崩溃，但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。\n\n虽然系统有默认的授权提示框，但我们人需要自己来配置页面。因为系统默认的授权提示框，有【不再提示】的选项，如果被选择，则再也无法触发授权提示了。只有使用我们自定义的授权提示页面，才可以引导用户修改授权。\n\n### 权限\n\n权限有分为【危险权限】和【一般权限】，危险权限必须要授权才可以使用，一般权限则不需要，如：\n``` bash\n<!--危险权限-->\n<uses-permission android:name=\"android.permission.READ_CALENDAR\"/>\n<uses-permission android:name=\"android.permission.WRITE_CALENDAR\"/>\n\n<!--一般权限-->\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n\n```\n\n既然要实现自定义授权页面，那我需要写一个权限检查的工具类\n\n``` java\n/**\n * 权限检查工具类\n * \n * Created by tanchaoyin on 16/1/26.\n */\npublic class PermissionsCheckerUtil {\n\n    private final Context mContext;\n\n    public PermissionsCheckerUtil(Context context) {\n        mContext = context.getApplicationContext();\n    }\n\n    // 判断权限列表\n    public boolean checkPermissions(String... permissions) {\n        for (String permission : permissions) {\n            if (checkPermission(permission)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // 否缺少权限的判断\n    private boolean checkPermission(String permission) {\n        return ContextCompat.checkSelfPermission(mContext, permission) ==\n                PackageManager.PERMISSION_DENIED;\n    }\n}\n```\n\n### 自定义授权页面\n\n``` java\n/**\n * 权限获取页面\n * \n * Created by tanchaoyin on 16/1/26.\n */\npublic class PermissionsActivity extends BaseActivity {\n\n    public static final int PERMISSIONS_GRANTED = 0; // 权限授权\n    public static final int PERMISSIONS_DENIED = 1; // 权限拒绝\n\n    private static final int PERMISSION_REQUEST_CODE = 0; // 系统权限管理页面的参数\n    private static final String EXTRA_PERMISSIONS = \"com.tanchaoyin.permission.extra_permission\"; // 权限参数\n\n    private static final String PACKAGE_URL_SCHEME = \"package:\"; // 方案\n\n    private PermissionsChecker mChecker; // 权限检测器\n    private boolean isRequireCheckFlag; // 是否需要系统权限检测\n\n    public static void startActivityForResult(Activity activity, int requestCode, String... permissions) {\n        Intent intent = new Intent(activity, PermissionsActivity.class);\n        intent.putExtra(EXTRA_PERMISSIONS, permissions);\n        ActivityCompat.startActivityForResult(activity, intent, requestCode, null);\n    }\n\n    @Override protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (getIntent() == null || !getIntent().hasExtra(EXTRA_PERMISSIONS)) {\n            throw new RuntimeException(\"呵呵，出错了哦。需要静态的startActivityForResult方法才可以启动哦！！！\");\n        }\n        setContentView(R.layout.activity_permissions);\n\n        mChecker = new PermissionsChecker(this);\n        isRequireCheckFlag = true;\n    }\n\n    @Override protected void onResume() {\n        super.onResume();\n        if (isRequireCheckFlag) {\n            String[] permissions = getPermissions();\n            if (mChecker.lacksPermissions(permissions)) {\n                requestPermissions(permissions); // 请求权限\n            } else {\n                allPermissionsGranted(); // 全部权限都已获取\n            }\n        } else {\n            isRequireCheckFlag = true;\n        }\n    }\n\n    // 返回传递的权限参数\n    private String[] getPermissions() {\n        return getIntent().getStringArrayExtra(EXTRA_PERMISSIONS);\n    }\n\n    // 请求权限兼容低版本\n    private void requestPermissions(String... permissions) {\n        ActivityCompat.requestPermissions(this, permissions, PERMISSION_REQUEST_CODE);\n    }\n\n    // 全部权限均已获取\n    private void allPermissionsGranted() {\n        setResult(PERMISSIONS_GRANTED);\n        finish();\n    }\n\n    /**\n     * 用户权限处理\n     *\n     * @param requestCode\n     * @param permissions\n     * @param grantResults\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        if (requestCode == PERMISSION_REQUEST_CODE && checkAllPermissionsGranted(grantResults)) {\n            isRequireCheckFlag = true;\n            allPermissionsGranted();\n        } else {\n            isRequireCheckFlag = false;\n            showMissingPermissionDialog();\n        }\n    }\n\n    // 判断是否有全部的权限\n    private boolean checkAllPermissionsGranted(@NonNull int[] grantResults) {\n        for (int grantResult : grantResults) {\n            if (grantResult == PackageManager.PERMISSION_DENIED) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // 显示缺失权限提示\n    private void showMissingPermissionDialog() {\n        AlertDialog.Builder builder = new AlertDialog.Builder(PermissionsActivity.this);\n        builder.setTitle(R.string.help);\n        builder.setMessage(R.string.string_help_text);\n\n        // 拒绝, 退出应用\n        builder.setNegativeButton(R.string.quit, new DialogInterface.OnClickListener() {\n            @Override public void onClick(DialogInterface dialog, int which) {\n                setResult(PERMISSIONS_DENIED);\n                finish();\n            }\n        });\n\n        builder.setPositiveButton(R.string.settings, new DialogInterface.OnClickListener() {\n            @Override public void onClick(DialogInterface dialog, int which) {\n                startAppSettings();\n            }\n        });\n\n        builder.show();\n    }\n\n    // 启动应用的设置\n    private void startAppSettings() {\n        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n        intent.setData(Uri.parse(PACKAGE_URL_SCHEME + getPackageName()));\n        startActivity(intent);\n    }\n}\n\n```\n\n### 权限使用\n\n``` java\n\npublic class MainActivity extends BaseActivity {\n\n    private static final int REQUEST_CODE = 0;\n\n    // 需要使用的所有权限\n    static final String[] PERMISSIONS = new String[]{\n            Manifest.permission.READ_CALENDAR,\n            Manifest.permission.WRITE_CALENDAR,\n            Manifest.permission.INTERNET\n    };\n\n    @Bind(R.id.toolbar) Toolbar toolbar;\n\n    private PermissionsCheckerUtil permissionsCheckerUtil; // 权限检测器\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ButterKnife.bind(this);\n\n        setSupportActionBar(mTToolbar);\n\n        permissionsCheckerUtil = new PermissionsCheckerUtil(this);\n    }\n\n    @Override protected void onResume() {\n        super.onResume();\n\n        // 没有权限, 则进入权限配置页面\n        if (permissionsCheckerUtil.lacksPermissions(PERMISSIONS)) {\n            // 权限配置页面\n            startPermissionsActivity();\n        }\n    }\n\n    private void startPermissionsActivity() {\n        PermissionsActivity.startActivityForResult(this, REQUEST_CODE, PERMISSIONS);\n    }\n\n    @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        // 拒绝授权, 关闭页面, 没有主要权限的情况下无法运行\n        if (requestCode == REQUEST_CODE && resultCode == PermissionsActivity.PERMISSIONS_DENIED) {\n            finish();\n        }\n    }\n}\n\n```\n\n一下这些权限，可以直接声明使用:\n\n``` java \n\nandroid.permission.ACCESS_LOCATION_EXTRA_COMMANDS\nandroid.permission.ACCESS_NETWORK_STATE\nandroid.permission.ACCESS_NOTIFICATION_POLICY\nandroid.permission.ACCESS_WIFI_STATE\nandroid.permission.ACCESS_WIMAX_STATE\nandroid.permission.BLUETOOTH\nandroid.permission.BLUETOOTH_ADMIN\nandroid.permission.BROADCAST_STICKY\nandroid.permission.CHANGE_NETWORK_STATE\nandroid.permission.CHANGE_WIFI_MULTICAST_STATE\nandroid.permission.CHANGE_WIFI_STATE\nandroid.permission.CHANGE_WIMAX_STATE\nandroid.permission.DISABLE_KEYGUARD\nandroid.permission.EXPAND_STATUS_BAR\nandroid.permission.FLASHLIGHT\nandroid.permission.GET_ACCOUNTS\nandroid.permission.GET_PACKAGE_SIZE\nandroid.permission.INTERNET\nandroid.permission.KILL_BACKGROUND_PROCESSES\nandroid.permission.MODIFY_AUDIO_SETTINGS\nandroid.permission.NFC\nandroid.permission.READ_SYNC_SETTINGS\nandroid.permission.READ_SYNC_STATS\nandroid.permission.RECEIVE_BOOT_COMPLETED\nandroid.permission.REORDER_TASKS\nandroid.permission.REQUEST_INSTALL_PACKAGES\nandroid.permission.SET_TIME_ZONE\nandroid.permission.SET_WALLPAPER\nandroid.permission.SET_WALLPAPER_HINTS\nandroid.permission.SUBSCRIBED_FEEDS_READ\nandroid.permission.TRANSMIT_IR\nandroid.permission.USE_FINGERPRINT\nandroid.permission.VIBRATE\nandroid.permission.WAKE_LOCK\nandroid.permission.WRITE_SYNC_SETTINGS\ncom.android.alarm.permission.SET_ALARM\ncom.android.launcher.permission.INSTALL_SHORTCUT\ncom.android.launcher.permission.UNINSTALL_SHORTCUT\n\n```","source":"_posts/动态权限管理.md","raw":"layout: posts\ntitle: \"Android 6.0 动态权限管理\"\ndate: 2016-04-08 14:16:09\ntags:\n- Android\n- 移动开发\n---\n\n随着Android6.0的发布，更多的新特性被推出，极大的提升了用户体验，但同时也做了一些改变，对开发人员带来了一定的麻烦。\n\nAndroid 6.0在我们原有的AndroidManifest.xml声明权限的基础上，又新增了运行时权限动态检测，以下权限都需要在运行时判断：\n\n``` bash\n身体传感器\n日历\n摄像头\n通讯录\n地理位置\n麦克风\n电话\n短信\n存储空间\n```\n\n### 运行时权限处理\nAndroid6.0系统默认为targetSdkVersion小于23的应用默认授予了所申请的所有权限，所以如果你以前的APP设置的targetSdkVersion低于23，在运行时也不会崩溃，但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。\n\n虽然系统有默认的授权提示框，但我们人需要自己来配置页面。因为系统默认的授权提示框，有【不再提示】的选项，如果被选择，则再也无法触发授权提示了。只有使用我们自定义的授权提示页面，才可以引导用户修改授权。\n\n### 权限\n\n权限有分为【危险权限】和【一般权限】，危险权限必须要授权才可以使用，一般权限则不需要，如：\n``` bash\n<!--危险权限-->\n<uses-permission android:name=\"android.permission.READ_CALENDAR\"/>\n<uses-permission android:name=\"android.permission.WRITE_CALENDAR\"/>\n\n<!--一般权限-->\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n\n```\n\n既然要实现自定义授权页面，那我需要写一个权限检查的工具类\n\n``` java\n/**\n * 权限检查工具类\n * \n * Created by tanchaoyin on 16/1/26.\n */\npublic class PermissionsCheckerUtil {\n\n    private final Context mContext;\n\n    public PermissionsCheckerUtil(Context context) {\n        mContext = context.getApplicationContext();\n    }\n\n    // 判断权限列表\n    public boolean checkPermissions(String... permissions) {\n        for (String permission : permissions) {\n            if (checkPermission(permission)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // 否缺少权限的判断\n    private boolean checkPermission(String permission) {\n        return ContextCompat.checkSelfPermission(mContext, permission) ==\n                PackageManager.PERMISSION_DENIED;\n    }\n}\n```\n\n### 自定义授权页面\n\n``` java\n/**\n * 权限获取页面\n * \n * Created by tanchaoyin on 16/1/26.\n */\npublic class PermissionsActivity extends BaseActivity {\n\n    public static final int PERMISSIONS_GRANTED = 0; // 权限授权\n    public static final int PERMISSIONS_DENIED = 1; // 权限拒绝\n\n    private static final int PERMISSION_REQUEST_CODE = 0; // 系统权限管理页面的参数\n    private static final String EXTRA_PERMISSIONS = \"com.tanchaoyin.permission.extra_permission\"; // 权限参数\n\n    private static final String PACKAGE_URL_SCHEME = \"package:\"; // 方案\n\n    private PermissionsChecker mChecker; // 权限检测器\n    private boolean isRequireCheckFlag; // 是否需要系统权限检测\n\n    public static void startActivityForResult(Activity activity, int requestCode, String... permissions) {\n        Intent intent = new Intent(activity, PermissionsActivity.class);\n        intent.putExtra(EXTRA_PERMISSIONS, permissions);\n        ActivityCompat.startActivityForResult(activity, intent, requestCode, null);\n    }\n\n    @Override protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (getIntent() == null || !getIntent().hasExtra(EXTRA_PERMISSIONS)) {\n            throw new RuntimeException(\"呵呵，出错了哦。需要静态的startActivityForResult方法才可以启动哦！！！\");\n        }\n        setContentView(R.layout.activity_permissions);\n\n        mChecker = new PermissionsChecker(this);\n        isRequireCheckFlag = true;\n    }\n\n    @Override protected void onResume() {\n        super.onResume();\n        if (isRequireCheckFlag) {\n            String[] permissions = getPermissions();\n            if (mChecker.lacksPermissions(permissions)) {\n                requestPermissions(permissions); // 请求权限\n            } else {\n                allPermissionsGranted(); // 全部权限都已获取\n            }\n        } else {\n            isRequireCheckFlag = true;\n        }\n    }\n\n    // 返回传递的权限参数\n    private String[] getPermissions() {\n        return getIntent().getStringArrayExtra(EXTRA_PERMISSIONS);\n    }\n\n    // 请求权限兼容低版本\n    private void requestPermissions(String... permissions) {\n        ActivityCompat.requestPermissions(this, permissions, PERMISSION_REQUEST_CODE);\n    }\n\n    // 全部权限均已获取\n    private void allPermissionsGranted() {\n        setResult(PERMISSIONS_GRANTED);\n        finish();\n    }\n\n    /**\n     * 用户权限处理\n     *\n     * @param requestCode\n     * @param permissions\n     * @param grantResults\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        if (requestCode == PERMISSION_REQUEST_CODE && checkAllPermissionsGranted(grantResults)) {\n            isRequireCheckFlag = true;\n            allPermissionsGranted();\n        } else {\n            isRequireCheckFlag = false;\n            showMissingPermissionDialog();\n        }\n    }\n\n    // 判断是否有全部的权限\n    private boolean checkAllPermissionsGranted(@NonNull int[] grantResults) {\n        for (int grantResult : grantResults) {\n            if (grantResult == PackageManager.PERMISSION_DENIED) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // 显示缺失权限提示\n    private void showMissingPermissionDialog() {\n        AlertDialog.Builder builder = new AlertDialog.Builder(PermissionsActivity.this);\n        builder.setTitle(R.string.help);\n        builder.setMessage(R.string.string_help_text);\n\n        // 拒绝, 退出应用\n        builder.setNegativeButton(R.string.quit, new DialogInterface.OnClickListener() {\n            @Override public void onClick(DialogInterface dialog, int which) {\n                setResult(PERMISSIONS_DENIED);\n                finish();\n            }\n        });\n\n        builder.setPositiveButton(R.string.settings, new DialogInterface.OnClickListener() {\n            @Override public void onClick(DialogInterface dialog, int which) {\n                startAppSettings();\n            }\n        });\n\n        builder.show();\n    }\n\n    // 启动应用的设置\n    private void startAppSettings() {\n        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n        intent.setData(Uri.parse(PACKAGE_URL_SCHEME + getPackageName()));\n        startActivity(intent);\n    }\n}\n\n```\n\n### 权限使用\n\n``` java\n\npublic class MainActivity extends BaseActivity {\n\n    private static final int REQUEST_CODE = 0;\n\n    // 需要使用的所有权限\n    static final String[] PERMISSIONS = new String[]{\n            Manifest.permission.READ_CALENDAR,\n            Manifest.permission.WRITE_CALENDAR,\n            Manifest.permission.INTERNET\n    };\n\n    @Bind(R.id.toolbar) Toolbar toolbar;\n\n    private PermissionsCheckerUtil permissionsCheckerUtil; // 权限检测器\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ButterKnife.bind(this);\n\n        setSupportActionBar(mTToolbar);\n\n        permissionsCheckerUtil = new PermissionsCheckerUtil(this);\n    }\n\n    @Override protected void onResume() {\n        super.onResume();\n\n        // 没有权限, 则进入权限配置页面\n        if (permissionsCheckerUtil.lacksPermissions(PERMISSIONS)) {\n            // 权限配置页面\n            startPermissionsActivity();\n        }\n    }\n\n    private void startPermissionsActivity() {\n        PermissionsActivity.startActivityForResult(this, REQUEST_CODE, PERMISSIONS);\n    }\n\n    @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        // 拒绝授权, 关闭页面, 没有主要权限的情况下无法运行\n        if (requestCode == REQUEST_CODE && resultCode == PermissionsActivity.PERMISSIONS_DENIED) {\n            finish();\n        }\n    }\n}\n\n```\n\n一下这些权限，可以直接声明使用:\n\n``` java \n\nandroid.permission.ACCESS_LOCATION_EXTRA_COMMANDS\nandroid.permission.ACCESS_NETWORK_STATE\nandroid.permission.ACCESS_NOTIFICATION_POLICY\nandroid.permission.ACCESS_WIFI_STATE\nandroid.permission.ACCESS_WIMAX_STATE\nandroid.permission.BLUETOOTH\nandroid.permission.BLUETOOTH_ADMIN\nandroid.permission.BROADCAST_STICKY\nandroid.permission.CHANGE_NETWORK_STATE\nandroid.permission.CHANGE_WIFI_MULTICAST_STATE\nandroid.permission.CHANGE_WIFI_STATE\nandroid.permission.CHANGE_WIMAX_STATE\nandroid.permission.DISABLE_KEYGUARD\nandroid.permission.EXPAND_STATUS_BAR\nandroid.permission.FLASHLIGHT\nandroid.permission.GET_ACCOUNTS\nandroid.permission.GET_PACKAGE_SIZE\nandroid.permission.INTERNET\nandroid.permission.KILL_BACKGROUND_PROCESSES\nandroid.permission.MODIFY_AUDIO_SETTINGS\nandroid.permission.NFC\nandroid.permission.READ_SYNC_SETTINGS\nandroid.permission.READ_SYNC_STATS\nandroid.permission.RECEIVE_BOOT_COMPLETED\nandroid.permission.REORDER_TASKS\nandroid.permission.REQUEST_INSTALL_PACKAGES\nandroid.permission.SET_TIME_ZONE\nandroid.permission.SET_WALLPAPER\nandroid.permission.SET_WALLPAPER_HINTS\nandroid.permission.SUBSCRIBED_FEEDS_READ\nandroid.permission.TRANSMIT_IR\nandroid.permission.USE_FINGERPRINT\nandroid.permission.VIBRATE\nandroid.permission.WAKE_LOCK\nandroid.permission.WRITE_SYNC_SETTINGS\ncom.android.alarm.permission.SET_ALARM\ncom.android.launcher.permission.INSTALL_SHORTCUT\ncom.android.launcher.permission.UNINSTALL_SHORTCUT\n\n```","slug":"动态权限管理","published":1,"updated":"2016-04-18T13:14:32.927Z","comments":1,"photos":[],"link":"","_id":"cin62199o0004aww4fzz84wjc","content":"<p>随着Android6.0的发布，更多的新特性被推出，极大的提升了用户体验，但同时也做了一些改变，对开发人员带来了一定的麻烦。</p>\n<p>Android 6.0在我们原有的AndroidManifest.xml声明权限的基础上，又新增了运行时权限动态检测，以下权限都需要在运行时判断：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">身体传感器</span><br><span class=\"line\">日历</span><br><span class=\"line\">摄像头</span><br><span class=\"line\">通讯录</span><br><span class=\"line\">地理位置</span><br><span class=\"line\">麦克风</span><br><span class=\"line\">电话</span><br><span class=\"line\">短信</span><br><span class=\"line\">存储空间</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行时权限处理\"><a href=\"#运行时权限处理\" class=\"headerlink\" title=\"运行时权限处理\"></a>运行时权限处理</h3><p>Android6.0系统默认为targetSdkVersion小于23的应用默认授予了所申请的所有权限，所以如果你以前的APP设置的targetSdkVersion低于23，在运行时也不会崩溃，但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。</p>\n<p>虽然系统有默认的授权提示框，但我们人需要自己来配置页面。因为系统默认的授权提示框，有【不再提示】的选项，如果被选择，则再也无法触发授权提示了。只有使用我们自定义的授权提示页面，才可以引导用户修改授权。</p>\n<h3 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>权限有分为【危险权限】和【一般权限】，危险权限必须要授权才可以使用，一般权限则不需要，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--危险权限--&gt;</span><br><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.READ_CALENDAR\"</span>/&gt;</span><br><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.WRITE_CALENDAR\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--一般权限--&gt;</span><br><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>既然要实现自定义授权页面，那我需要写一个权限检查的工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 权限检查工具类</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * Created by tanchaoyin on 16/1/26.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionsCheckerUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PermissionsCheckerUtil</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mContext = context.getApplicationContext();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断权限列表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkPermissions</span><span class=\"params\">(String... permissions)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String permission : permissions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (checkPermission(permission)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 否缺少权限的判断</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkPermission</span><span class=\"params\">(String permission)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ContextCompat.checkSelfPermission(mContext, permission) ==</span><br><span class=\"line\">                PackageManager.PERMISSION_DENIED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义授权页面\"><a href=\"#自定义授权页面\" class=\"headerlink\" title=\"自定义授权页面\"></a>自定义授权页面</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 权限获取页面</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * Created by tanchaoyin on 16/1/26.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionsActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PERMISSIONS_GRANTED = <span class=\"number\">0</span>; <span class=\"comment\">// 权限授权</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PERMISSIONS_DENIED = <span class=\"number\">1</span>; <span class=\"comment\">// 权限拒绝</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PERMISSION_REQUEST_CODE = <span class=\"number\">0</span>; <span class=\"comment\">// 系统权限管理页面的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_PERMISSIONS = <span class=\"string\">\"com.tanchaoyin.permission.extra_permission\"</span>; <span class=\"comment\">// 权限参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PACKAGE_URL_SCHEME = <span class=\"string\">\"package:\"</span>; <span class=\"comment\">// 方案</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PermissionsChecker mChecker; <span class=\"comment\">// 权限检测器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isRequireCheckFlag; <span class=\"comment\">// 是否需要系统权限检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(Activity activity, <span class=\"keyword\">int</span> requestCode, String... permissions)</span> </span>&#123;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(activity, PermissionsActivity.class);</span><br><span class=\"line\">        intent.putExtra(EXTRA_PERMISSIONS, permissions);</span><br><span class=\"line\">        ActivityCompat.startActivityForResult(activity, intent, requestCode, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getIntent() == <span class=\"keyword\">null</span> || !getIntent().hasExtra(EXTRA_PERMISSIONS)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"呵呵，出错了哦。需要静态的startActivityForResult方法才可以启动哦！！！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setContentView(R.layout.activity_permissions);</span><br><span class=\"line\"></span><br><span class=\"line\">        mChecker = <span class=\"keyword\">new</span> PermissionsChecker(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        isRequireCheckFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRequireCheckFlag) &#123;</span><br><span class=\"line\">            String[] permissions = getPermissions();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mChecker.lacksPermissions(permissions)) &#123;</span><br><span class=\"line\">                requestPermissions(permissions); <span class=\"comment\">// 请求权限</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allPermissionsGranted(); <span class=\"comment\">// 全部权限都已获取</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            isRequireCheckFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回传递的权限参数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] getPermissions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getIntent().getStringArrayExtra(EXTRA_PERMISSIONS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 请求权限兼容低版本</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">requestPermissions</span><span class=\"params\">(String... permissions)</span> </span>&#123;</span><br><span class=\"line\">        ActivityCompat.requestPermissions(<span class=\"keyword\">this</span>, permissions, PERMISSION_REQUEST_CODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全部权限均已获取</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">allPermissionsGranted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        setResult(PERMISSIONS_GRANTED);</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 用户权限处理</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> requestCode</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> permissions</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> grantResults</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode == PERMISSION_REQUEST_CODE &amp;&amp; checkAllPermissionsGranted(grantResults)) &#123;</span><br><span class=\"line\">            isRequireCheckFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            allPermissionsGranted();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            isRequireCheckFlag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            showMissingPermissionDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有全部的权限</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkAllPermissionsGranted</span><span class=\"params\">(@NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> grantResult : grantResults) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grantResult == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 显示缺失权限提示</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showMissingPermissionDialog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AlertDialog.Builder builder = <span class=\"keyword\">new</span> AlertDialog.Builder(PermissionsActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        builder.setTitle(R.string.help);</span><br><span class=\"line\">        builder.setMessage(R.string.string_help_text);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拒绝, 退出应用</span></span><br><span class=\"line\">        builder.setNegativeButton(R.string.quit, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                setResult(PERMISSIONS_DENIED);</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.setPositiveButton(R.string.settings, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                startAppSettings();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启动应用的设置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startAppSettings</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</span><br><span class=\"line\">        intent.setData(Uri.parse(PACKAGE_URL_SCHEME + getPackageName()));</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"权限使用\"><a href=\"#权限使用\" class=\"headerlink\" title=\"权限使用\"></a>权限使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_CODE = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 需要使用的所有权限</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] PERMISSIONS = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">            Manifest.permission.READ_CALENDAR,</span><br><span class=\"line\">            Manifest.permission.WRITE_CALENDAR,</span><br><span class=\"line\">            Manifest.permission.INTERNET</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.toolbar) Toolbar toolbar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PermissionsCheckerUtil permissionsCheckerUtil; <span class=\"comment\">// 权限检测器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setSupportActionBar(mTToolbar);</span><br><span class=\"line\"></span><br><span class=\"line\">        permissionsCheckerUtil = <span class=\"keyword\">new</span> PermissionsCheckerUtil(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 没有权限, 则进入权限配置页面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (permissionsCheckerUtil.lacksPermissions(PERMISSIONS)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 权限配置页面</span></span><br><span class=\"line\">            startPermissionsActivity();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startPermissionsActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        PermissionsActivity.startActivityForResult(<span class=\"keyword\">this</span>, REQUEST_CODE, PERMISSIONS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">        <span class=\"comment\">// 拒绝授权, 关闭页面, 没有主要权限的情况下无法运行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE &amp;&amp; resultCode == PermissionsActivity.PERMISSIONS_DENIED) &#123;</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一下这些权限，可以直接声明使用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><br><span class=\"line\">android.permission.ACCESS_NETWORK_STATE</span><br><span class=\"line\">android.permission.ACCESS_NOTIFICATION_POLICY</span><br><span class=\"line\">android.permission.ACCESS_WIFI_STATE</span><br><span class=\"line\">android.permission.ACCESS_WIMAX_STATE</span><br><span class=\"line\">android.permission.BLUETOOTH</span><br><span class=\"line\">android.permission.BLUETOOTH_ADMIN</span><br><span class=\"line\">android.permission.BROADCAST_STICKY</span><br><span class=\"line\">android.permission.CHANGE_NETWORK_STATE</span><br><span class=\"line\">android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br><span class=\"line\">android.permission.CHANGE_WIFI_STATE</span><br><span class=\"line\">android.permission.CHANGE_WIMAX_STATE</span><br><span class=\"line\">android.permission.DISABLE_KEYGUARD</span><br><span class=\"line\">android.permission.EXPAND_STATUS_BAR</span><br><span class=\"line\">android.permission.FLASHLIGHT</span><br><span class=\"line\">android.permission.GET_ACCOUNTS</span><br><span class=\"line\">android.permission.GET_PACKAGE_SIZE</span><br><span class=\"line\">android.permission.INTERNET</span><br><span class=\"line\">android.permission.KILL_BACKGROUND_PROCESSES</span><br><span class=\"line\">android.permission.MODIFY_AUDIO_SETTINGS</span><br><span class=\"line\">android.permission.NFC</span><br><span class=\"line\">android.permission.READ_SYNC_SETTINGS</span><br><span class=\"line\">android.permission.READ_SYNC_STATS</span><br><span class=\"line\">android.permission.RECEIVE_BOOT_COMPLETED</span><br><span class=\"line\">android.permission.REORDER_TASKS</span><br><span class=\"line\">android.permission.REQUEST_INSTALL_PACKAGES</span><br><span class=\"line\">android.permission.SET_TIME_ZONE</span><br><span class=\"line\">android.permission.SET_WALLPAPER</span><br><span class=\"line\">android.permission.SET_WALLPAPER_HINTS</span><br><span class=\"line\">android.permission.SUBSCRIBED_FEEDS_READ</span><br><span class=\"line\">android.permission.TRANSMIT_IR</span><br><span class=\"line\">android.permission.USE_FINGERPRINT</span><br><span class=\"line\">android.permission.VIBRATE</span><br><span class=\"line\">android.permission.WAKE_LOCK</span><br><span class=\"line\">android.permission.WRITE_SYNC_SETTINGS</span><br><span class=\"line\">com.android.alarm.permission.SET_ALARM</span><br><span class=\"line\">com.android.launcher.permission.INSTALL_SHORTCUT</span><br><span class=\"line\">com.android.launcher.permission.UNINSTALL_SHORTCUT</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>随着Android6.0的发布，更多的新特性被推出，极大的提升了用户体验，但同时也做了一些改变，对开发人员带来了一定的麻烦。</p>\n<p>Android 6.0在我们原有的AndroidManifest.xml声明权限的基础上，又新增了运行时权限动态检测，以下权限都需要在运行时判断：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">身体传感器</span><br><span class=\"line\">日历</span><br><span class=\"line\">摄像头</span><br><span class=\"line\">通讯录</span><br><span class=\"line\">地理位置</span><br><span class=\"line\">麦克风</span><br><span class=\"line\">电话</span><br><span class=\"line\">短信</span><br><span class=\"line\">存储空间</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行时权限处理\"><a href=\"#运行时权限处理\" class=\"headerlink\" title=\"运行时权限处理\"></a>运行时权限处理</h3><p>Android6.0系统默认为targetSdkVersion小于23的应用默认授予了所申请的所有权限，所以如果你以前的APP设置的targetSdkVersion低于23，在运行时也不会崩溃，但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。</p>\n<p>虽然系统有默认的授权提示框，但我们人需要自己来配置页面。因为系统默认的授权提示框，有【不再提示】的选项，如果被选择，则再也无法触发授权提示了。只有使用我们自定义的授权提示页面，才可以引导用户修改授权。</p>\n<h3 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>权限有分为【危险权限】和【一般权限】，危险权限必须要授权才可以使用，一般权限则不需要，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--危险权限--&gt;</span><br><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.READ_CALENDAR\"</span>/&gt;</span><br><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.WRITE_CALENDAR\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--一般权限--&gt;</span><br><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>既然要实现自定义授权页面，那我需要写一个权限检查的工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 权限检查工具类</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * Created by tanchaoyin on 16/1/26.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionsCheckerUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PermissionsCheckerUtil</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mContext = context.getApplicationContext();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断权限列表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkPermissions</span><span class=\"params\">(String... permissions)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String permission : permissions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (checkPermission(permission)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 否缺少权限的判断</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkPermission</span><span class=\"params\">(String permission)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ContextCompat.checkSelfPermission(mContext, permission) ==</span><br><span class=\"line\">                PackageManager.PERMISSION_DENIED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义授权页面\"><a href=\"#自定义授权页面\" class=\"headerlink\" title=\"自定义授权页面\"></a>自定义授权页面</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 权限获取页面</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * Created by tanchaoyin on 16/1/26.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionsActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PERMISSIONS_GRANTED = <span class=\"number\">0</span>; <span class=\"comment\">// 权限授权</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PERMISSIONS_DENIED = <span class=\"number\">1</span>; <span class=\"comment\">// 权限拒绝</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PERMISSION_REQUEST_CODE = <span class=\"number\">0</span>; <span class=\"comment\">// 系统权限管理页面的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_PERMISSIONS = <span class=\"string\">\"com.tanchaoyin.permission.extra_permission\"</span>; <span class=\"comment\">// 权限参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PACKAGE_URL_SCHEME = <span class=\"string\">\"package:\"</span>; <span class=\"comment\">// 方案</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PermissionsChecker mChecker; <span class=\"comment\">// 权限检测器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isRequireCheckFlag; <span class=\"comment\">// 是否需要系统权限检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(Activity activity, <span class=\"keyword\">int</span> requestCode, String... permissions)</span> </span>&#123;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(activity, PermissionsActivity.class);</span><br><span class=\"line\">        intent.putExtra(EXTRA_PERMISSIONS, permissions);</span><br><span class=\"line\">        ActivityCompat.startActivityForResult(activity, intent, requestCode, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getIntent() == <span class=\"keyword\">null</span> || !getIntent().hasExtra(EXTRA_PERMISSIONS)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"呵呵，出错了哦。需要静态的startActivityForResult方法才可以启动哦！！！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setContentView(R.layout.activity_permissions);</span><br><span class=\"line\"></span><br><span class=\"line\">        mChecker = <span class=\"keyword\">new</span> PermissionsChecker(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        isRequireCheckFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRequireCheckFlag) &#123;</span><br><span class=\"line\">            String[] permissions = getPermissions();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mChecker.lacksPermissions(permissions)) &#123;</span><br><span class=\"line\">                requestPermissions(permissions); <span class=\"comment\">// 请求权限</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allPermissionsGranted(); <span class=\"comment\">// 全部权限都已获取</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            isRequireCheckFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回传递的权限参数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] getPermissions() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getIntent().getStringArrayExtra(EXTRA_PERMISSIONS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 请求权限兼容低版本</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">requestPermissions</span><span class=\"params\">(String... permissions)</span> </span>&#123;</span><br><span class=\"line\">        ActivityCompat.requestPermissions(<span class=\"keyword\">this</span>, permissions, PERMISSION_REQUEST_CODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全部权限均已获取</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">allPermissionsGranted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        setResult(PERMISSIONS_GRANTED);</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 用户权限处理</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> requestCode</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> permissions</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> grantResults</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode == PERMISSION_REQUEST_CODE &amp;&amp; checkAllPermissionsGranted(grantResults)) &#123;</span><br><span class=\"line\">            isRequireCheckFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            allPermissionsGranted();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            isRequireCheckFlag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            showMissingPermissionDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有全部的权限</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkAllPermissionsGranted</span><span class=\"params\">(@NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> grantResult : grantResults) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grantResult == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 显示缺失权限提示</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showMissingPermissionDialog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AlertDialog.Builder builder = <span class=\"keyword\">new</span> AlertDialog.Builder(PermissionsActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        builder.setTitle(R.string.help);</span><br><span class=\"line\">        builder.setMessage(R.string.string_help_text);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拒绝, 退出应用</span></span><br><span class=\"line\">        builder.setNegativeButton(R.string.quit, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                setResult(PERMISSIONS_DENIED);</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.setPositiveButton(R.string.settings, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                startAppSettings();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启动应用的设置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startAppSettings</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</span><br><span class=\"line\">        intent.setData(Uri.parse(PACKAGE_URL_SCHEME + getPackageName()));</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"权限使用\"><a href=\"#权限使用\" class=\"headerlink\" title=\"权限使用\"></a>权限使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_CODE = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 需要使用的所有权限</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] PERMISSIONS = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">            Manifest.permission.READ_CALENDAR,</span><br><span class=\"line\">            Manifest.permission.WRITE_CALENDAR,</span><br><span class=\"line\">            Manifest.permission.INTERNET</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.toolbar) Toolbar toolbar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PermissionsCheckerUtil permissionsCheckerUtil; <span class=\"comment\">// 权限检测器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setSupportActionBar(mTToolbar);</span><br><span class=\"line\"></span><br><span class=\"line\">        permissionsCheckerUtil = <span class=\"keyword\">new</span> PermissionsCheckerUtil(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 没有权限, 则进入权限配置页面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (permissionsCheckerUtil.lacksPermissions(PERMISSIONS)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 权限配置页面</span></span><br><span class=\"line\">            startPermissionsActivity();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startPermissionsActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        PermissionsActivity.startActivityForResult(<span class=\"keyword\">this</span>, REQUEST_CODE, PERMISSIONS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">        <span class=\"comment\">// 拒绝授权, 关闭页面, 没有主要权限的情况下无法运行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE &amp;&amp; resultCode == PermissionsActivity.PERMISSIONS_DENIED) &#123;</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一下这些权限，可以直接声明使用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><br><span class=\"line\">android.permission.ACCESS_NETWORK_STATE</span><br><span class=\"line\">android.permission.ACCESS_NOTIFICATION_POLICY</span><br><span class=\"line\">android.permission.ACCESS_WIFI_STATE</span><br><span class=\"line\">android.permission.ACCESS_WIMAX_STATE</span><br><span class=\"line\">android.permission.BLUETOOTH</span><br><span class=\"line\">android.permission.BLUETOOTH_ADMIN</span><br><span class=\"line\">android.permission.BROADCAST_STICKY</span><br><span class=\"line\">android.permission.CHANGE_NETWORK_STATE</span><br><span class=\"line\">android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br><span class=\"line\">android.permission.CHANGE_WIFI_STATE</span><br><span class=\"line\">android.permission.CHANGE_WIMAX_STATE</span><br><span class=\"line\">android.permission.DISABLE_KEYGUARD</span><br><span class=\"line\">android.permission.EXPAND_STATUS_BAR</span><br><span class=\"line\">android.permission.FLASHLIGHT</span><br><span class=\"line\">android.permission.GET_ACCOUNTS</span><br><span class=\"line\">android.permission.GET_PACKAGE_SIZE</span><br><span class=\"line\">android.permission.INTERNET</span><br><span class=\"line\">android.permission.KILL_BACKGROUND_PROCESSES</span><br><span class=\"line\">android.permission.MODIFY_AUDIO_SETTINGS</span><br><span class=\"line\">android.permission.NFC</span><br><span class=\"line\">android.permission.READ_SYNC_SETTINGS</span><br><span class=\"line\">android.permission.READ_SYNC_STATS</span><br><span class=\"line\">android.permission.RECEIVE_BOOT_COMPLETED</span><br><span class=\"line\">android.permission.REORDER_TASKS</span><br><span class=\"line\">android.permission.REQUEST_INSTALL_PACKAGES</span><br><span class=\"line\">android.permission.SET_TIME_ZONE</span><br><span class=\"line\">android.permission.SET_WALLPAPER</span><br><span class=\"line\">android.permission.SET_WALLPAPER_HINTS</span><br><span class=\"line\">android.permission.SUBSCRIBED_FEEDS_READ</span><br><span class=\"line\">android.permission.TRANSMIT_IR</span><br><span class=\"line\">android.permission.USE_FINGERPRINT</span><br><span class=\"line\">android.permission.VIBRATE</span><br><span class=\"line\">android.permission.WAKE_LOCK</span><br><span class=\"line\">android.permission.WRITE_SYNC_SETTINGS</span><br><span class=\"line\">com.android.alarm.permission.SET_ALARM</span><br><span class=\"line\">com.android.launcher.permission.INSTALL_SHORTCUT</span><br><span class=\"line\">com.android.launcher.permission.UNINSTALL_SHORTCUT</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cin6219980000aww4bigx0afx","tag_id":"cin62199j0002aww4eccjd1by","_id":"cin62199s0007aww43db5stk1"},{"post_id":"cin6219980000aww4bigx0afx","tag_id":"cin62199p0005aww42yxgl804","_id":"cin62199s0008aww4j9l2d1vd"},{"post_id":"cin62199f0001aww4ckl2b0vw","tag_id":"cin62199j0002aww4eccjd1by","_id":"cin62199u000baww4xsr5f8mt"},{"post_id":"cin62199f0001aww4ckl2b0vw","tag_id":"cin62199t0009aww4whsb18qn","_id":"cin62199u000caww4stix2q2b"},{"post_id":"cin62199m0003aww4fq60e7gl","tag_id":"cin62199j0002aww4eccjd1by","_id":"cin62199v000faww4lb8w667m"},{"post_id":"cin62199m0003aww4fq60e7gl","tag_id":"cin62199t0009aww4whsb18qn","_id":"cin62199v000gaww4d66fs027"},{"post_id":"cin62199o0004aww4fzz84wjc","tag_id":"cin62199j0002aww4eccjd1by","_id":"cin62199w000haww44xmxb02j"},{"post_id":"cin62199o0004aww4fzz84wjc","tag_id":"cin62199t0009aww4whsb18qn","_id":"cin62199w000iaww4265f2f6c"}],"Tag":[{"name":"Android","_id":"cin62199j0002aww4eccjd1by"},{"name":"杂谈","_id":"cin62199p0005aww42yxgl804"},{"name":"移动开发","_id":"cin62199t0009aww4whsb18qn"}]}}